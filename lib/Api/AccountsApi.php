<?php
/**
 * AccountsApi
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.161
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Yapily\ApiException;
use Yapily\Configuration;
use Yapily\HeaderSelector;
use Yapily\ObjectSerializer;

/**
 * AccountsApi Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAccountDirectDebitsUsingGET
     *
     * Get account direct debits
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s direct debit results (optional)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiListResponseOfPaymentResponse
     */
    public function getAccountDirectDebitsUsingGET($account_id, $consent, $limit = null)
    {
        list($response) = $this->getAccountDirectDebitsUsingGETWithHttpInfo($account_id, $consent, $limit);
        return $response;
    }

    /**
     * Operation getAccountDirectDebitsUsingGETWithHttpInfo
     *
     * Get account direct debits
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s direct debit results (optional)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiListResponseOfPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountDirectDebitsUsingGETWithHttpInfo($account_id, $consent, $limit = null)
    {
        $returnType = '\Yapily\Model\ApiListResponseOfPaymentResponse';
        $request = $this->getAccountDirectDebitsUsingGETRequest($account_id, $consent, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiListResponseOfPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountDirectDebitsUsingGETAsync
     *
     * Get account direct debits
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s direct debit results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDirectDebitsUsingGETAsync($account_id, $consent, $limit = null)
    {
        return $this->getAccountDirectDebitsUsingGETAsyncWithHttpInfo($account_id, $consent, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountDirectDebitsUsingGETAsyncWithHttpInfo
     *
     * Get account direct debits
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s direct debit results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDirectDebitsUsingGETAsyncWithHttpInfo($account_id, $consent, $limit = null)
    {
        $returnType = '\Yapily\Model\ApiListResponseOfPaymentResponse';
        $request = $this->getAccountDirectDebitsUsingGETRequest($account_id, $consent, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountDirectDebitsUsingGET'
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s direct debit results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountDirectDebitsUsingGETRequest($account_id, $consent, $limit = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getAccountDirectDebitsUsingGET'
            );
        }
        // verify the required parameter 'consent' is set
        if ($consent === null || (is_array($consent) && count($consent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent when calling getAccountDirectDebitsUsingGET'
            );
        }

        $resourcePath = '/accounts/{accountId}/direct-debits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // header params
        if ($consent !== null) {
            $headerParams['consent'] = ObjectSerializer::toHeaderValue($consent);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountPeriodicPaymentsUsingGET
     *
     * Get account payments detail
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s periodic payment order results (optional)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiListResponseOfPaymentResponse
     */
    public function getAccountPeriodicPaymentsUsingGET($account_id, $consent, $limit = null)
    {
        list($response) = $this->getAccountPeriodicPaymentsUsingGETWithHttpInfo($account_id, $consent, $limit);
        return $response;
    }

    /**
     * Operation getAccountPeriodicPaymentsUsingGETWithHttpInfo
     *
     * Get account payments detail
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s periodic payment order results (optional)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiListResponseOfPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountPeriodicPaymentsUsingGETWithHttpInfo($account_id, $consent, $limit = null)
    {
        $returnType = '\Yapily\Model\ApiListResponseOfPaymentResponse';
        $request = $this->getAccountPeriodicPaymentsUsingGETRequest($account_id, $consent, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiListResponseOfPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountPeriodicPaymentsUsingGETAsync
     *
     * Get account payments detail
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s periodic payment order results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountPeriodicPaymentsUsingGETAsync($account_id, $consent, $limit = null)
    {
        return $this->getAccountPeriodicPaymentsUsingGETAsyncWithHttpInfo($account_id, $consent, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountPeriodicPaymentsUsingGETAsyncWithHttpInfo
     *
     * Get account payments detail
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s periodic payment order results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountPeriodicPaymentsUsingGETAsyncWithHttpInfo($account_id, $consent, $limit = null)
    {
        $returnType = '\Yapily\Model\ApiListResponseOfPaymentResponse';
        $request = $this->getAccountPeriodicPaymentsUsingGETRequest($account_id, $consent, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountPeriodicPaymentsUsingGET'
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s periodic payment order results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountPeriodicPaymentsUsingGETRequest($account_id, $consent, $limit = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getAccountPeriodicPaymentsUsingGET'
            );
        }
        // verify the required parameter 'consent' is set
        if ($consent === null || (is_array($consent) && count($consent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent when calling getAccountPeriodicPaymentsUsingGET'
            );
        }

        $resourcePath = '/accounts/{accountId}/periodic-payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // header params
        if ($consent !== null) {
            $headerParams['consent'] = ObjectSerializer::toHeaderValue($consent);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountScheduledPaymentsUsingGET
     *
     * Get account scheduled payments
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s scheduled payment results (optional)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiListResponseOfPaymentResponse
     */
    public function getAccountScheduledPaymentsUsingGET($account_id, $consent, $limit = null)
    {
        list($response) = $this->getAccountScheduledPaymentsUsingGETWithHttpInfo($account_id, $consent, $limit);
        return $response;
    }

    /**
     * Operation getAccountScheduledPaymentsUsingGETWithHttpInfo
     *
     * Get account scheduled payments
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s scheduled payment results (optional)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiListResponseOfPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountScheduledPaymentsUsingGETWithHttpInfo($account_id, $consent, $limit = null)
    {
        $returnType = '\Yapily\Model\ApiListResponseOfPaymentResponse';
        $request = $this->getAccountScheduledPaymentsUsingGETRequest($account_id, $consent, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiListResponseOfPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountScheduledPaymentsUsingGETAsync
     *
     * Get account scheduled payments
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s scheduled payment results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountScheduledPaymentsUsingGETAsync($account_id, $consent, $limit = null)
    {
        return $this->getAccountScheduledPaymentsUsingGETAsyncWithHttpInfo($account_id, $consent, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountScheduledPaymentsUsingGETAsyncWithHttpInfo
     *
     * Get account scheduled payments
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s scheduled payment results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountScheduledPaymentsUsingGETAsyncWithHttpInfo($account_id, $consent, $limit = null)
    {
        $returnType = '\Yapily\Model\ApiListResponseOfPaymentResponse';
        $request = $this->getAccountScheduledPaymentsUsingGETRequest($account_id, $consent, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountScheduledPaymentsUsingGET'
     *
     * @param  string $account_id accountId (required)
     * @param  string $consent Consent Token (required)
     * @param  int $limit Use this parameter to limit account&#39;s scheduled payment results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountScheduledPaymentsUsingGETRequest($account_id, $consent, $limit = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getAccountScheduledPaymentsUsingGET'
            );
        }
        // verify the required parameter 'consent' is set
        if ($consent === null || (is_array($consent) && count($consent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent when calling getAccountScheduledPaymentsUsingGET'
            );
        }

        $resourcePath = '/accounts/{accountId}/scheduled-payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // header params
        if ($consent !== null) {
            $headerParams['consent'] = ObjectSerializer::toHeaderValue($consent);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountUsingGET
     *
     * Get account
     *
     * @param  string $consent Consent Token (required)
     * @param  string $account_id accountId (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiResponseOfAccount
     */
    public function getAccountUsingGET($consent, $account_id)
    {
        list($response) = $this->getAccountUsingGETWithHttpInfo($consent, $account_id);
        return $response;
    }

    /**
     * Operation getAccountUsingGETWithHttpInfo
     *
     * Get account
     *
     * @param  string $consent Consent Token (required)
     * @param  string $account_id accountId (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiResponseOfAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountUsingGETWithHttpInfo($consent, $account_id)
    {
        $returnType = '\Yapily\Model\ApiResponseOfAccount';
        $request = $this->getAccountUsingGETRequest($consent, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiResponseOfAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountUsingGETAsync
     *
     * Get account
     *
     * @param  string $consent Consent Token (required)
     * @param  string $account_id accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountUsingGETAsync($consent, $account_id)
    {
        return $this->getAccountUsingGETAsyncWithHttpInfo($consent, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountUsingGETAsyncWithHttpInfo
     *
     * Get account
     *
     * @param  string $consent Consent Token (required)
     * @param  string $account_id accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountUsingGETAsyncWithHttpInfo($consent, $account_id)
    {
        $returnType = '\Yapily\Model\ApiResponseOfAccount';
        $request = $this->getAccountUsingGETRequest($consent, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountUsingGET'
     *
     * @param  string $consent Consent Token (required)
     * @param  string $account_id accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountUsingGETRequest($consent, $account_id)
    {
        // verify the required parameter 'consent' is set
        if ($consent === null || (is_array($consent) && count($consent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent when calling getAccountUsingGET'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getAccountUsingGET'
            );
        }

        $resourcePath = '/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($consent !== null) {
            $headerParams['consent'] = ObjectSerializer::toHeaderValue($consent);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountsUsingGET
     *
     * Get accounts
     *
     * @param  string $consent Consent Token (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiListResponseOfAccount
     */
    public function getAccountsUsingGET($consent)
    {
        list($response) = $this->getAccountsUsingGETWithHttpInfo($consent);
        return $response;
    }

    /**
     * Operation getAccountsUsingGETWithHttpInfo
     *
     * Get accounts
     *
     * @param  string $consent Consent Token (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiListResponseOfAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountsUsingGETWithHttpInfo($consent)
    {
        $returnType = '\Yapily\Model\ApiListResponseOfAccount';
        $request = $this->getAccountsUsingGETRequest($consent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiListResponseOfAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountsUsingGETAsync
     *
     * Get accounts
     *
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountsUsingGETAsync($consent)
    {
        return $this->getAccountsUsingGETAsyncWithHttpInfo($consent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountsUsingGETAsyncWithHttpInfo
     *
     * Get accounts
     *
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountsUsingGETAsyncWithHttpInfo($consent)
    {
        $returnType = '\Yapily\Model\ApiListResponseOfAccount';
        $request = $this->getAccountsUsingGETRequest($consent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountsUsingGET'
     *
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountsUsingGETRequest($consent)
    {
        // verify the required parameter 'consent' is set
        if ($consent === null || (is_array($consent) && count($consent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent when calling getAccountsUsingGET'
            );
        }

        $resourcePath = '/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($consent !== null) {
            $headerParams['consent'] = ObjectSerializer::toHeaderValue($consent);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation initiateAccountRequestUsingPOST
     *
     * Initiate a new account request for user to authorize
     *
     * @param  \Yapily\Model\AccountAuthorisationRequest $account_auth_request accountAuthRequest (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiResponseOfAuthorisationRequestResponse
     */
    public function initiateAccountRequestUsingPOST($account_auth_request)
    {
        list($response) = $this->initiateAccountRequestUsingPOSTWithHttpInfo($account_auth_request);
        return $response;
    }

    /**
     * Operation initiateAccountRequestUsingPOSTWithHttpInfo
     *
     * Initiate a new account request for user to authorize
     *
     * @param  \Yapily\Model\AccountAuthorisationRequest $account_auth_request accountAuthRequest (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiResponseOfAuthorisationRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function initiateAccountRequestUsingPOSTWithHttpInfo($account_auth_request)
    {
        $returnType = '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse';
        $request = $this->initiateAccountRequestUsingPOSTRequest($account_auth_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation initiateAccountRequestUsingPOSTAsync
     *
     * Initiate a new account request for user to authorize
     *
     * @param  \Yapily\Model\AccountAuthorisationRequest $account_auth_request accountAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function initiateAccountRequestUsingPOSTAsync($account_auth_request)
    {
        return $this->initiateAccountRequestUsingPOSTAsyncWithHttpInfo($account_auth_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation initiateAccountRequestUsingPOSTAsyncWithHttpInfo
     *
     * Initiate a new account request for user to authorize
     *
     * @param  \Yapily\Model\AccountAuthorisationRequest $account_auth_request accountAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function initiateAccountRequestUsingPOSTAsyncWithHttpInfo($account_auth_request)
    {
        $returnType = '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse';
        $request = $this->initiateAccountRequestUsingPOSTRequest($account_auth_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'initiateAccountRequestUsingPOST'
     *
     * @param  \Yapily\Model\AccountAuthorisationRequest $account_auth_request accountAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function initiateAccountRequestUsingPOSTRequest($account_auth_request)
    {
        // verify the required parameter 'account_auth_request' is set
        if ($account_auth_request === null || (is_array($account_auth_request) && count($account_auth_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_auth_request when calling initiateAccountRequestUsingPOST'
            );
        }

        $resourcePath = '/account-auth-requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($account_auth_request)) {
            $_tempBody = $account_auth_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json;charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reAuthoriseAccountUsingPATCH
     *
     * Re-authorize account request
     *
     * @param  string $consent Consent Token (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiResponseOfAuthorisationRequestResponse
     */
    public function reAuthoriseAccountUsingPATCH($consent)
    {
        list($response) = $this->reAuthoriseAccountUsingPATCHWithHttpInfo($consent);
        return $response;
    }

    /**
     * Operation reAuthoriseAccountUsingPATCHWithHttpInfo
     *
     * Re-authorize account request
     *
     * @param  string $consent Consent Token (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiResponseOfAuthorisationRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reAuthoriseAccountUsingPATCHWithHttpInfo($consent)
    {
        $returnType = '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse';
        $request = $this->reAuthoriseAccountUsingPATCHRequest($consent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reAuthoriseAccountUsingPATCHAsync
     *
     * Re-authorize account request
     *
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reAuthoriseAccountUsingPATCHAsync($consent)
    {
        return $this->reAuthoriseAccountUsingPATCHAsyncWithHttpInfo($consent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reAuthoriseAccountUsingPATCHAsyncWithHttpInfo
     *
     * Re-authorize account request
     *
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reAuthoriseAccountUsingPATCHAsyncWithHttpInfo($consent)
    {
        $returnType = '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse';
        $request = $this->reAuthoriseAccountUsingPATCHRequest($consent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reAuthoriseAccountUsingPATCH'
     *
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reAuthoriseAccountUsingPATCHRequest($consent)
    {
        // verify the required parameter 'consent' is set
        if ($consent === null || (is_array($consent) && count($consent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent when calling reAuthoriseAccountUsingPATCH'
            );
        }

        $resourcePath = '/account-auth-requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($consent !== null) {
            $headerParams['consent'] = ObjectSerializer::toHeaderValue($consent);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
