<?php
/**
 * PaymentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.149
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Yapily\ApiException;
use Yapily\Configuration;
use Yapily\HeaderSelector;
use Yapily\ObjectSerializer;

/**
 * PaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPaymentAuthorisationUsingPOST
     *
     * Initiate a payment for user to authorise
     *
     * @param  \Yapily\Model\PaymentAuthorisationRequest $payment_auth_request paymentAuthRequest (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiResponseOfAuthorisationRequestResponse
     */
    public function createPaymentAuthorisationUsingPOST($payment_auth_request)
    {
        list($response) = $this->createPaymentAuthorisationUsingPOSTWithHttpInfo($payment_auth_request);
        return $response;
    }

    /**
     * Operation createPaymentAuthorisationUsingPOSTWithHttpInfo
     *
     * Initiate a payment for user to authorise
     *
     * @param  \Yapily\Model\PaymentAuthorisationRequest $payment_auth_request paymentAuthRequest (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiResponseOfAuthorisationRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentAuthorisationUsingPOSTWithHttpInfo($payment_auth_request)
    {
        $returnType = '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse';
        $request = $this->createPaymentAuthorisationUsingPOSTRequest($payment_auth_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentAuthorisationUsingPOSTAsync
     *
     * Initiate a payment for user to authorise
     *
     * @param  \Yapily\Model\PaymentAuthorisationRequest $payment_auth_request paymentAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAuthorisationUsingPOSTAsync($payment_auth_request)
    {
        return $this->createPaymentAuthorisationUsingPOSTAsyncWithHttpInfo($payment_auth_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentAuthorisationUsingPOSTAsyncWithHttpInfo
     *
     * Initiate a payment for user to authorise
     *
     * @param  \Yapily\Model\PaymentAuthorisationRequest $payment_auth_request paymentAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAuthorisationUsingPOSTAsyncWithHttpInfo($payment_auth_request)
    {
        $returnType = '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse';
        $request = $this->createPaymentAuthorisationUsingPOSTRequest($payment_auth_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentAuthorisationUsingPOST'
     *
     * @param  \Yapily\Model\PaymentAuthorisationRequest $payment_auth_request paymentAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPaymentAuthorisationUsingPOSTRequest($payment_auth_request)
    {
        // verify the required parameter 'payment_auth_request' is set
        if ($payment_auth_request === null || (is_array($payment_auth_request) && count($payment_auth_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_auth_request when calling createPaymentAuthorisationUsingPOST'
            );
        }

        $resourcePath = '/payment-auth-requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($payment_auth_request)) {
            $_tempBody = $payment_auth_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json;charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentAuthorisationWithSortCodeUsingPOST
     *
     * Initiate a new single payment for user to authorise
     *
     * @param  \Yapily\Model\SortCodePaymentAuthRequest $payment_auth_request paymentAuthRequest (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiResponseOfAuthorisationRequestResponse
     */
    public function createPaymentAuthorisationWithSortCodeUsingPOST($payment_auth_request)
    {
        list($response) = $this->createPaymentAuthorisationWithSortCodeUsingPOSTWithHttpInfo($payment_auth_request);
        return $response;
    }

    /**
     * Operation createPaymentAuthorisationWithSortCodeUsingPOSTWithHttpInfo
     *
     * Initiate a new single payment for user to authorise
     *
     * @param  \Yapily\Model\SortCodePaymentAuthRequest $payment_auth_request paymentAuthRequest (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiResponseOfAuthorisationRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentAuthorisationWithSortCodeUsingPOSTWithHttpInfo($payment_auth_request)
    {
        $returnType = '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse';
        $request = $this->createPaymentAuthorisationWithSortCodeUsingPOSTRequest($payment_auth_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentAuthorisationWithSortCodeUsingPOSTAsync
     *
     * Initiate a new single payment for user to authorise
     *
     * @param  \Yapily\Model\SortCodePaymentAuthRequest $payment_auth_request paymentAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAuthorisationWithSortCodeUsingPOSTAsync($payment_auth_request)
    {
        return $this->createPaymentAuthorisationWithSortCodeUsingPOSTAsyncWithHttpInfo($payment_auth_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentAuthorisationWithSortCodeUsingPOSTAsyncWithHttpInfo
     *
     * Initiate a new single payment for user to authorise
     *
     * @param  \Yapily\Model\SortCodePaymentAuthRequest $payment_auth_request paymentAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAuthorisationWithSortCodeUsingPOSTAsyncWithHttpInfo($payment_auth_request)
    {
        $returnType = '\Yapily\Model\ApiResponseOfAuthorisationRequestResponse';
        $request = $this->createPaymentAuthorisationWithSortCodeUsingPOSTRequest($payment_auth_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentAuthorisationWithSortCodeUsingPOST'
     *
     * @param  \Yapily\Model\SortCodePaymentAuthRequest $payment_auth_request paymentAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPaymentAuthorisationWithSortCodeUsingPOSTRequest($payment_auth_request)
    {
        // verify the required parameter 'payment_auth_request' is set
        if ($payment_auth_request === null || (is_array($payment_auth_request) && count($payment_auth_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_auth_request when calling createPaymentAuthorisationWithSortCodeUsingPOST'
            );
        }

        $resourcePath = '/payment-sortcode-auth-requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($payment_auth_request)) {
            $_tempBody = $payment_auth_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json;charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentUsingPOST
     *
     * Create a payment
     *
     * @param  string $consent Consent Token (required)
     * @param  \Yapily\Model\PaymentRequest $payment_request paymentRequest (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiResponseOfPaymentResponse
     */
    public function createPaymentUsingPOST($consent, $payment_request)
    {
        list($response) = $this->createPaymentUsingPOSTWithHttpInfo($consent, $payment_request);
        return $response;
    }

    /**
     * Operation createPaymentUsingPOSTWithHttpInfo
     *
     * Create a payment
     *
     * @param  string $consent Consent Token (required)
     * @param  \Yapily\Model\PaymentRequest $payment_request paymentRequest (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiResponseOfPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentUsingPOSTWithHttpInfo($consent, $payment_request)
    {
        $returnType = '\Yapily\Model\ApiResponseOfPaymentResponse';
        $request = $this->createPaymentUsingPOSTRequest($consent, $payment_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiResponseOfPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentUsingPOSTAsync
     *
     * Create a payment
     *
     * @param  string $consent Consent Token (required)
     * @param  \Yapily\Model\PaymentRequest $payment_request paymentRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentUsingPOSTAsync($consent, $payment_request)
    {
        return $this->createPaymentUsingPOSTAsyncWithHttpInfo($consent, $payment_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentUsingPOSTAsyncWithHttpInfo
     *
     * Create a payment
     *
     * @param  string $consent Consent Token (required)
     * @param  \Yapily\Model\PaymentRequest $payment_request paymentRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentUsingPOSTAsyncWithHttpInfo($consent, $payment_request)
    {
        $returnType = '\Yapily\Model\ApiResponseOfPaymentResponse';
        $request = $this->createPaymentUsingPOSTRequest($consent, $payment_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentUsingPOST'
     *
     * @param  string $consent Consent Token (required)
     * @param  \Yapily\Model\PaymentRequest $payment_request paymentRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPaymentUsingPOSTRequest($consent, $payment_request)
    {
        // verify the required parameter 'consent' is set
        if ($consent === null || (is_array($consent) && count($consent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent when calling createPaymentUsingPOST'
            );
        }
        // verify the required parameter 'payment_request' is set
        if ($payment_request === null || (is_array($payment_request) && count($payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_request when calling createPaymentUsingPOST'
            );
        }

        $resourcePath = '/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($consent !== null) {
            $headerParams['consent'] = ObjectSerializer::toHeaderValue($consent);
        }


        // body params
        $_tempBody = null;
        if (isset($payment_request)) {
            $_tempBody = $payment_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json;charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentWithSortCodeUsingPOST
     *
     * Create a new single payment
     *
     * @param  string $consent Consent Token (required)
     * @param  \Yapily\Model\SortCodePaymentRequest $payment_request paymentRequest (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiResponseOfPaymentResponse
     */
    public function createPaymentWithSortCodeUsingPOST($consent, $payment_request)
    {
        list($response) = $this->createPaymentWithSortCodeUsingPOSTWithHttpInfo($consent, $payment_request);
        return $response;
    }

    /**
     * Operation createPaymentWithSortCodeUsingPOSTWithHttpInfo
     *
     * Create a new single payment
     *
     * @param  string $consent Consent Token (required)
     * @param  \Yapily\Model\SortCodePaymentRequest $payment_request paymentRequest (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiResponseOfPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentWithSortCodeUsingPOSTWithHttpInfo($consent, $payment_request)
    {
        $returnType = '\Yapily\Model\ApiResponseOfPaymentResponse';
        $request = $this->createPaymentWithSortCodeUsingPOSTRequest($consent, $payment_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiResponseOfPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentWithSortCodeUsingPOSTAsync
     *
     * Create a new single payment
     *
     * @param  string $consent Consent Token (required)
     * @param  \Yapily\Model\SortCodePaymentRequest $payment_request paymentRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentWithSortCodeUsingPOSTAsync($consent, $payment_request)
    {
        return $this->createPaymentWithSortCodeUsingPOSTAsyncWithHttpInfo($consent, $payment_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentWithSortCodeUsingPOSTAsyncWithHttpInfo
     *
     * Create a new single payment
     *
     * @param  string $consent Consent Token (required)
     * @param  \Yapily\Model\SortCodePaymentRequest $payment_request paymentRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentWithSortCodeUsingPOSTAsyncWithHttpInfo($consent, $payment_request)
    {
        $returnType = '\Yapily\Model\ApiResponseOfPaymentResponse';
        $request = $this->createPaymentWithSortCodeUsingPOSTRequest($consent, $payment_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentWithSortCodeUsingPOST'
     *
     * @param  string $consent Consent Token (required)
     * @param  \Yapily\Model\SortCodePaymentRequest $payment_request paymentRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPaymentWithSortCodeUsingPOSTRequest($consent, $payment_request)
    {
        // verify the required parameter 'consent' is set
        if ($consent === null || (is_array($consent) && count($consent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent when calling createPaymentWithSortCodeUsingPOST'
            );
        }
        // verify the required parameter 'payment_request' is set
        if ($payment_request === null || (is_array($payment_request) && count($payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_request when calling createPaymentWithSortCodeUsingPOST'
            );
        }

        $resourcePath = '/payment-sortcode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($consent !== null) {
            $headerParams['consent'] = ObjectSerializer::toHeaderValue($consent);
        }


        // body params
        $_tempBody = null;
        if (isset($payment_request)) {
            $_tempBody = $payment_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json;charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentStatusUsingGET
     *
     * Get status of a payment
     *
     * @param  string $payment_id paymentId (required)
     * @param  string $consent Consent Token (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiResponseOfPaymentResponse
     */
    public function getPaymentStatusUsingGET($payment_id, $consent)
    {
        list($response) = $this->getPaymentStatusUsingGETWithHttpInfo($payment_id, $consent);
        return $response;
    }

    /**
     * Operation getPaymentStatusUsingGETWithHttpInfo
     *
     * Get status of a payment
     *
     * @param  string $payment_id paymentId (required)
     * @param  string $consent Consent Token (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiResponseOfPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentStatusUsingGETWithHttpInfo($payment_id, $consent)
    {
        $returnType = '\Yapily\Model\ApiResponseOfPaymentResponse';
        $request = $this->getPaymentStatusUsingGETRequest($payment_id, $consent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiResponseOfPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentStatusUsingGETAsync
     *
     * Get status of a payment
     *
     * @param  string $payment_id paymentId (required)
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentStatusUsingGETAsync($payment_id, $consent)
    {
        return $this->getPaymentStatusUsingGETAsyncWithHttpInfo($payment_id, $consent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentStatusUsingGETAsyncWithHttpInfo
     *
     * Get status of a payment
     *
     * @param  string $payment_id paymentId (required)
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentStatusUsingGETAsyncWithHttpInfo($payment_id, $consent)
    {
        $returnType = '\Yapily\Model\ApiResponseOfPaymentResponse';
        $request = $this->getPaymentStatusUsingGETRequest($payment_id, $consent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentStatusUsingGET'
     *
     * @param  string $payment_id paymentId (required)
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentStatusUsingGETRequest($payment_id, $consent)
    {
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling getPaymentStatusUsingGET'
            );
        }
        // verify the required parameter 'consent' is set
        if ($consent === null || (is_array($consent) && count($consent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent when calling getPaymentStatusUsingGET'
            );
        }

        $resourcePath = '/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($consent !== null) {
            $headerParams['consent'] = ObjectSerializer::toHeaderValue($consent);
        }

        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentsUsingGET
     *
     * Get payments detail
     *
     * @param  string $payment_id paymentId (required)
     * @param  string $consent Consent Token (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Yapily\Model\ApiResponseOfPaymentResponses
     */
    public function getPaymentsUsingGET($payment_id, $consent)
    {
        list($response) = $this->getPaymentsUsingGETWithHttpInfo($payment_id, $consent);
        return $response;
    }

    /**
     * Operation getPaymentsUsingGETWithHttpInfo
     *
     * Get payments detail
     *
     * @param  string $payment_id paymentId (required)
     * @param  string $consent Consent Token (required)
     *
     * @throws \Yapily\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Yapily\Model\ApiResponseOfPaymentResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentsUsingGETWithHttpInfo($payment_id, $consent)
    {
        $returnType = '\Yapily\Model\ApiResponseOfPaymentResponses';
        $request = $this->getPaymentsUsingGETRequest($payment_id, $consent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yapily\Model\ApiResponseOfPaymentResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentsUsingGETAsync
     *
     * Get payments detail
     *
     * @param  string $payment_id paymentId (required)
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsUsingGETAsync($payment_id, $consent)
    {
        return $this->getPaymentsUsingGETAsyncWithHttpInfo($payment_id, $consent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentsUsingGETAsyncWithHttpInfo
     *
     * Get payments detail
     *
     * @param  string $payment_id paymentId (required)
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsUsingGETAsyncWithHttpInfo($payment_id, $consent)
    {
        $returnType = '\Yapily\Model\ApiResponseOfPaymentResponses';
        $request = $this->getPaymentsUsingGETRequest($payment_id, $consent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentsUsingGET'
     *
     * @param  string $payment_id paymentId (required)
     * @param  string $consent Consent Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentsUsingGETRequest($payment_id, $consent)
    {
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling getPaymentsUsingGET'
            );
        }
        // verify the required parameter 'consent' is set
        if ($consent === null || (is_array($consent) && count($consent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent when calling getPaymentsUsingGET'
            );
        }

        $resourcePath = '/payments/{paymentId}/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($consent !== null) {
            $headerParams['consent'] = ObjectSerializer::toHeaderValue($consent);
        }

        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json;charset=UTF-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json;charset=UTF-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
