<?php
/**
 * PersonalCurrentAccountPCAMarketingState
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.161
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * PersonalCurrentAccountPCAMarketingState Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PersonalCurrentAccountPCAMarketingState implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PersonalCurrentAccountPCAMarketingState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'core_product' => '\Yapily\Model\CoreProduct',
        'credit_interest' => '\Yapily\Model\CreditInterest',
        'eligibility' => '\Yapily\Model\Eligibility',
        'first_marketed_date' => '\DateTime',
        'identification' => 'string',
        'last_marketed_date' => '\DateTime',
        'marketing_state' => 'string',
        'notes' => 'string[]',
        'overdraft' => '\Yapily\Model\Overdraft',
        'predecessor_id' => 'string',
        'state_tenure_length' => 'float',
        'state_tenure_period' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'core_product' => null,
        'credit_interest' => null,
        'eligibility' => null,
        'first_marketed_date' => 'date-time',
        'identification' => null,
        'last_marketed_date' => 'date-time',
        'marketing_state' => null,
        'notes' => null,
        'overdraft' => null,
        'predecessor_id' => null,
        'state_tenure_length' => 'float',
        'state_tenure_period' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'core_product' => 'CoreProduct',
        'credit_interest' => 'CreditInterest',
        'eligibility' => 'Eligibility',
        'first_marketed_date' => 'FirstMarketedDate',
        'identification' => 'Identification',
        'last_marketed_date' => 'LastMarketedDate',
        'marketing_state' => 'MarketingState',
        'notes' => 'Notes',
        'overdraft' => 'Overdraft',
        'predecessor_id' => 'PredecessorID',
        'state_tenure_length' => 'StateTenureLength',
        'state_tenure_period' => 'StateTenurePeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'core_product' => 'setCoreProduct',
        'credit_interest' => 'setCreditInterest',
        'eligibility' => 'setEligibility',
        'first_marketed_date' => 'setFirstMarketedDate',
        'identification' => 'setIdentification',
        'last_marketed_date' => 'setLastMarketedDate',
        'marketing_state' => 'setMarketingState',
        'notes' => 'setNotes',
        'overdraft' => 'setOverdraft',
        'predecessor_id' => 'setPredecessorId',
        'state_tenure_length' => 'setStateTenureLength',
        'state_tenure_period' => 'setStateTenurePeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'core_product' => 'getCoreProduct',
        'credit_interest' => 'getCreditInterest',
        'eligibility' => 'getEligibility',
        'first_marketed_date' => 'getFirstMarketedDate',
        'identification' => 'getIdentification',
        'last_marketed_date' => 'getLastMarketedDate',
        'marketing_state' => 'getMarketingState',
        'notes' => 'getNotes',
        'overdraft' => 'getOverdraft',
        'predecessor_id' => 'getPredecessorId',
        'state_tenure_length' => 'getStateTenureLength',
        'state_tenure_period' => 'getStateTenurePeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['core_product'] = isset($data['core_product']) ? $data['core_product'] : null;
        $this->container['credit_interest'] = isset($data['credit_interest']) ? $data['credit_interest'] : null;
        $this->container['eligibility'] = isset($data['eligibility']) ? $data['eligibility'] : null;
        $this->container['first_marketed_date'] = isset($data['first_marketed_date']) ? $data['first_marketed_date'] : null;
        $this->container['identification'] = isset($data['identification']) ? $data['identification'] : null;
        $this->container['last_marketed_date'] = isset($data['last_marketed_date']) ? $data['last_marketed_date'] : null;
        $this->container['marketing_state'] = isset($data['marketing_state']) ? $data['marketing_state'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['overdraft'] = isset($data['overdraft']) ? $data['overdraft'] : null;
        $this->container['predecessor_id'] = isset($data['predecessor_id']) ? $data['predecessor_id'] : null;
        $this->container['state_tenure_length'] = isset($data['state_tenure_length']) ? $data['state_tenure_length'] : null;
        $this->container['state_tenure_period'] = isset($data['state_tenure_period']) ? $data['state_tenure_period'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets core_product
     *
     * @return \Yapily\Model\CoreProduct
     */
    public function getCoreProduct()
    {
        return $this->container['core_product'];
    }

    /**
     * Sets core_product
     *
     * @param \Yapily\Model\CoreProduct $core_product core_product
     *
     * @return $this
     */
    public function setCoreProduct($core_product)
    {
        $this->container['core_product'] = $core_product;

        return $this;
    }

    /**
     * Gets credit_interest
     *
     * @return \Yapily\Model\CreditInterest
     */
    public function getCreditInterest()
    {
        return $this->container['credit_interest'];
    }

    /**
     * Sets credit_interest
     *
     * @param \Yapily\Model\CreditInterest $credit_interest credit_interest
     *
     * @return $this
     */
    public function setCreditInterest($credit_interest)
    {
        $this->container['credit_interest'] = $credit_interest;

        return $this;
    }

    /**
     * Gets eligibility
     *
     * @return \Yapily\Model\Eligibility
     */
    public function getEligibility()
    {
        return $this->container['eligibility'];
    }

    /**
     * Sets eligibility
     *
     * @param \Yapily\Model\Eligibility $eligibility eligibility
     *
     * @return $this
     */
    public function setEligibility($eligibility)
    {
        $this->container['eligibility'] = $eligibility;

        return $this;
    }

    /**
     * Gets first_marketed_date
     *
     * @return \DateTime
     */
    public function getFirstMarketedDate()
    {
        return $this->container['first_marketed_date'];
    }

    /**
     * Sets first_marketed_date
     *
     * @param \DateTime $first_marketed_date first_marketed_date
     *
     * @return $this
     */
    public function setFirstMarketedDate($first_marketed_date)
    {
        $this->container['first_marketed_date'] = $first_marketed_date;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return string
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param string $identification identification
     *
     * @return $this
     */
    public function setIdentification($identification)
    {
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets last_marketed_date
     *
     * @return \DateTime
     */
    public function getLastMarketedDate()
    {
        return $this->container['last_marketed_date'];
    }

    /**
     * Sets last_marketed_date
     *
     * @param \DateTime $last_marketed_date last_marketed_date
     *
     * @return $this
     */
    public function setLastMarketedDate($last_marketed_date)
    {
        $this->container['last_marketed_date'] = $last_marketed_date;

        return $this;
    }

    /**
     * Gets marketing_state
     *
     * @return string
     */
    public function getMarketingState()
    {
        return $this->container['marketing_state'];
    }

    /**
     * Sets marketing_state
     *
     * @param string $marketing_state marketing_state
     *
     * @return $this
     */
    public function setMarketingState($marketing_state)
    {
        $this->container['marketing_state'] = $marketing_state;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string[] $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets overdraft
     *
     * @return \Yapily\Model\Overdraft
     */
    public function getOverdraft()
    {
        return $this->container['overdraft'];
    }

    /**
     * Sets overdraft
     *
     * @param \Yapily\Model\Overdraft $overdraft overdraft
     *
     * @return $this
     */
    public function setOverdraft($overdraft)
    {
        $this->container['overdraft'] = $overdraft;

        return $this;
    }

    /**
     * Gets predecessor_id
     *
     * @return string
     */
    public function getPredecessorId()
    {
        return $this->container['predecessor_id'];
    }

    /**
     * Sets predecessor_id
     *
     * @param string $predecessor_id predecessor_id
     *
     * @return $this
     */
    public function setPredecessorId($predecessor_id)
    {
        $this->container['predecessor_id'] = $predecessor_id;

        return $this;
    }

    /**
     * Gets state_tenure_length
     *
     * @return float
     */
    public function getStateTenureLength()
    {
        return $this->container['state_tenure_length'];
    }

    /**
     * Sets state_tenure_length
     *
     * @param float $state_tenure_length state_tenure_length
     *
     * @return $this
     */
    public function setStateTenureLength($state_tenure_length)
    {
        $this->container['state_tenure_length'] = $state_tenure_length;

        return $this;
    }

    /**
     * Gets state_tenure_period
     *
     * @return string
     */
    public function getStateTenurePeriod()
    {
        return $this->container['state_tenure_period'];
    }

    /**
     * Sets state_tenure_period
     *
     * @param string $state_tenure_period state_tenure_period
     *
     * @return $this
     */
    public function setStateTenurePeriod($state_tenure_period)
    {
        $this->container['state_tenure_period'] = $state_tenure_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


