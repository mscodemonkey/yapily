<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.161
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'date' => '\DateTime',
        'booking_date_time' => '\DateTime',
        'value_date_time' => '\DateTime',
        'status' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'transaction_amount' => '\Yapily\Model\Amount',
        'currency_exchange' => '\Yapily\Model\CurrencyExchange',
        'charge_details' => '\Yapily\Model\ChargeDetails',
        'reference' => 'string',
        'statement_references' => '\Yapily\Model\StatementReference[]',
        'description' => 'string',
        'transaction_information' => 'string[]',
        'address_details' => '\Yapily\Model\AddressDetails',
        'iso_bank_transaction_code' => '\Yapily\Model\IsoBankTransactionCode',
        'proprietary_bank_transaction_code' => '\Yapily\Model\ProprietaryBankTransactionCode',
        'balance' => '\Yapily\Model\Balance',
        'merchant' => '\Yapily\Model\Merchant'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'date' => 'date-time',
        'booking_date_time' => 'date-time',
        'value_date_time' => 'date-time',
        'status' => null,
        'amount' => null,
        'currency' => null,
        'transaction_amount' => null,
        'currency_exchange' => null,
        'charge_details' => null,
        'reference' => null,
        'statement_references' => null,
        'description' => null,
        'transaction_information' => null,
        'address_details' => null,
        'iso_bank_transaction_code' => null,
        'proprietary_bank_transaction_code' => null,
        'balance' => null,
        'merchant' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'date' => 'date',
        'booking_date_time' => 'bookingDateTime',
        'value_date_time' => 'valueDateTime',
        'status' => 'status',
        'amount' => 'amount',
        'currency' => 'currency',
        'transaction_amount' => 'transactionAmount',
        'currency_exchange' => 'currencyExchange',
        'charge_details' => 'chargeDetails',
        'reference' => 'reference',
        'statement_references' => 'statementReferences',
        'description' => 'description',
        'transaction_information' => 'transactionInformation',
        'address_details' => 'addressDetails',
        'iso_bank_transaction_code' => 'isoBankTransactionCode',
        'proprietary_bank_transaction_code' => 'proprietaryBankTransactionCode',
        'balance' => 'balance',
        'merchant' => 'merchant'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'date' => 'setDate',
        'booking_date_time' => 'setBookingDateTime',
        'value_date_time' => 'setValueDateTime',
        'status' => 'setStatus',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'transaction_amount' => 'setTransactionAmount',
        'currency_exchange' => 'setCurrencyExchange',
        'charge_details' => 'setChargeDetails',
        'reference' => 'setReference',
        'statement_references' => 'setStatementReferences',
        'description' => 'setDescription',
        'transaction_information' => 'setTransactionInformation',
        'address_details' => 'setAddressDetails',
        'iso_bank_transaction_code' => 'setIsoBankTransactionCode',
        'proprietary_bank_transaction_code' => 'setProprietaryBankTransactionCode',
        'balance' => 'setBalance',
        'merchant' => 'setMerchant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'date' => 'getDate',
        'booking_date_time' => 'getBookingDateTime',
        'value_date_time' => 'getValueDateTime',
        'status' => 'getStatus',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'transaction_amount' => 'getTransactionAmount',
        'currency_exchange' => 'getCurrencyExchange',
        'charge_details' => 'getChargeDetails',
        'reference' => 'getReference',
        'statement_references' => 'getStatementReferences',
        'description' => 'getDescription',
        'transaction_information' => 'getTransactionInformation',
        'address_details' => 'getAddressDetails',
        'iso_bank_transaction_code' => 'getIsoBankTransactionCode',
        'proprietary_bank_transaction_code' => 'getProprietaryBankTransactionCode',
        'balance' => 'getBalance',
        'merchant' => 'getMerchant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_BOOKED = 'BOOKED';
    const STATUS_PENDING = 'PENDING';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_BOOKED,
            self::STATUS_PENDING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['booking_date_time'] = isset($data['booking_date_time']) ? $data['booking_date_time'] : null;
        $this->container['value_date_time'] = isset($data['value_date_time']) ? $data['value_date_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['transaction_amount'] = isset($data['transaction_amount']) ? $data['transaction_amount'] : null;
        $this->container['currency_exchange'] = isset($data['currency_exchange']) ? $data['currency_exchange'] : null;
        $this->container['charge_details'] = isset($data['charge_details']) ? $data['charge_details'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['statement_references'] = isset($data['statement_references']) ? $data['statement_references'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['transaction_information'] = isset($data['transaction_information']) ? $data['transaction_information'] : null;
        $this->container['address_details'] = isset($data['address_details']) ? $data['address_details'] : null;
        $this->container['iso_bank_transaction_code'] = isset($data['iso_bank_transaction_code']) ? $data['iso_bank_transaction_code'] : null;
        $this->container['proprietary_bank_transaction_code'] = isset($data['proprietary_bank_transaction_code']) ? $data['proprietary_bank_transaction_code'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['merchant'] = isset($data['merchant']) ? $data['merchant'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Transaction Id returned by the institution if present
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Transaction date as defined by the institution
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets booking_date_time
     *
     * @return \DateTime
     */
    public function getBookingDateTime()
    {
        return $this->container['booking_date_time'];
    }

    /**
     * Sets booking_date_time
     *
     * @param \DateTime $booking_date_time Date and (if available) time that transaction is posted
     *
     * @return $this
     */
    public function setBookingDateTime($booking_date_time)
    {
        $this->container['booking_date_time'] = $booking_date_time;

        return $this;
    }

    /**
     * Gets value_date_time
     *
     * @return \DateTime
     */
    public function getValueDateTime()
    {
        return $this->container['value_date_time'];
    }

    /**
     * Sets value_date_time
     *
     * @param \DateTime $value_date_time The actual or expected date and time transaction is cleared
     *
     * @return $this
     */
    public function setValueDateTime($value_date_time)
    {
        $this->container['value_date_time'] = $value_date_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the transaction
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Deprecated. Use the amount value in `transactionAmount` instead
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Deprecated. Use the currency value in `transactionAmount` instead
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return \Yapily\Model\Amount
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param \Yapily\Model\Amount $transaction_amount transaction_amount
     *
     * @return $this
     */
    public function setTransactionAmount($transaction_amount)
    {
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets currency_exchange
     *
     * @return \Yapily\Model\CurrencyExchange
     */
    public function getCurrencyExchange()
    {
        return $this->container['currency_exchange'];
    }

    /**
     * Sets currency_exchange
     *
     * @param \Yapily\Model\CurrencyExchange $currency_exchange currency_exchange
     *
     * @return $this
     */
    public function setCurrencyExchange($currency_exchange)
    {
        $this->container['currency_exchange'] = $currency_exchange;

        return $this;
    }

    /**
     * Gets charge_details
     *
     * @return \Yapily\Model\ChargeDetails
     */
    public function getChargeDetails()
    {
        return $this->container['charge_details'];
    }

    /**
     * Sets charge_details
     *
     * @param \Yapily\Model\ChargeDetails $charge_details If present, contains details of any charges applied during this transaction
     *
     * @return $this
     */
    public function setChargeDetails($charge_details)
    {
        $this->container['charge_details'] = $charge_details;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Transaction reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets statement_references
     *
     * @return \Yapily\Model\StatementReference[]
     */
    public function getStatementReferences()
    {
        return $this->container['statement_references'];
    }

    /**
     * Sets statement_references
     *
     * @param \Yapily\Model\StatementReference[] $statement_references statement_references
     *
     * @return $this
     */
    public function setStatementReferences($statement_references)
    {
        $this->container['statement_references'] = $statement_references;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Unstructured text containing details of the transaction. Usage varies according to the institution
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets transaction_information
     *
     * @return string[]
     */
    public function getTransactionInformation()
    {
        return $this->container['transaction_information'];
    }

    /**
     * Sets transaction_information
     *
     * @param string[] $transaction_information Further information related to the transaction. Usage varies according to the institution
     *
     * @return $this
     */
    public function setTransactionInformation($transaction_information)
    {
        $this->container['transaction_information'] = $transaction_information;

        return $this;
    }

    /**
     * Gets address_details
     *
     * @return \Yapily\Model\AddressDetails
     */
    public function getAddressDetails()
    {
        return $this->container['address_details'];
    }

    /**
     * Sets address_details
     *
     * @param \Yapily\Model\AddressDetails $address_details address_details
     *
     * @return $this
     */
    public function setAddressDetails($address_details)
    {
        $this->container['address_details'] = $address_details;

        return $this;
    }

    /**
     * Gets iso_bank_transaction_code
     *
     * @return \Yapily\Model\IsoBankTransactionCode
     */
    public function getIsoBankTransactionCode()
    {
        return $this->container['iso_bank_transaction_code'];
    }

    /**
     * Sets iso_bank_transaction_code
     *
     * @param \Yapily\Model\IsoBankTransactionCode $iso_bank_transaction_code iso_bank_transaction_code
     *
     * @return $this
     */
    public function setIsoBankTransactionCode($iso_bank_transaction_code)
    {
        $this->container['iso_bank_transaction_code'] = $iso_bank_transaction_code;

        return $this;
    }

    /**
     * Gets proprietary_bank_transaction_code
     *
     * @return \Yapily\Model\ProprietaryBankTransactionCode
     */
    public function getProprietaryBankTransactionCode()
    {
        return $this->container['proprietary_bank_transaction_code'];
    }

    /**
     * Sets proprietary_bank_transaction_code
     *
     * @param \Yapily\Model\ProprietaryBankTransactionCode $proprietary_bank_transaction_code proprietary_bank_transaction_code
     *
     * @return $this
     */
    public function setProprietaryBankTransactionCode($proprietary_bank_transaction_code)
    {
        $this->container['proprietary_bank_transaction_code'] = $proprietary_bank_transaction_code;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return \Yapily\Model\Balance
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param \Yapily\Model\Balance $balance Running account balance after transaction has been applied
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Yapily\Model\Merchant
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Yapily\Model\Merchant $merchant Merchant details
     *
     * @return $this
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


