<?php
/**
 * Location
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.149
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * Location Class Doc Comment
 *
 * @category Class
 * @description Location of the ATM.
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Location implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Location';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'location_category' => 'string[]',
        'other_location_category' => '\Yapily\Model\LocationOtherLocationCategory[]',
        'postal_address' => '\Yapily\Model\PostalAddress1',
        'site' => '\Yapily\Model\Site',
        'map_service_links' => '\Yapily\Model\ATMMapServiceLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'location_category' => null,
        'other_location_category' => null,
        'postal_address' => null,
        'site' => null,
        'map_service_links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location_category' => 'LocationCategory',
        'other_location_category' => 'OtherLocationCategory',
        'postal_address' => 'PostalAddress',
        'site' => 'Site',
        'map_service_links' => 'mapServiceLinks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location_category' => 'setLocationCategory',
        'other_location_category' => 'setOtherLocationCategory',
        'postal_address' => 'setPostalAddress',
        'site' => 'setSite',
        'map_service_links' => 'setMapServiceLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location_category' => 'getLocationCategory',
        'other_location_category' => 'getOtherLocationCategory',
        'postal_address' => 'getPostalAddress',
        'site' => 'getSite',
        'map_service_links' => 'getMapServiceLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOCATION_CATEGORY_BRANCH_EXTERNAL = 'BranchExternal';
    const LOCATION_CATEGORY_BRANCH_INTERNAL = 'BranchInternal';
    const LOCATION_CATEGORY_BRANCH_LOBBY = 'BranchLobby';
    const LOCATION_CATEGORY_OTHER = 'Other';
    const LOCATION_CATEGORY_RETAILER_OUTLET = 'RetailerOutlet';
    const LOCATION_CATEGORY_REMOTE_UNIT = 'RemoteUnit';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationCategoryAllowableValues()
    {
        return [
            self::LOCATION_CATEGORY_BRANCH_EXTERNAL,
            self::LOCATION_CATEGORY_BRANCH_INTERNAL,
            self::LOCATION_CATEGORY_BRANCH_LOBBY,
            self::LOCATION_CATEGORY_OTHER,
            self::LOCATION_CATEGORY_RETAILER_OUTLET,
            self::LOCATION_CATEGORY_REMOTE_UNIT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['location_category'] = isset($data['location_category']) ? $data['location_category'] : null;
        $this->container['other_location_category'] = isset($data['other_location_category']) ? $data['other_location_category'] : null;
        $this->container['postal_address'] = isset($data['postal_address']) ? $data['postal_address'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['map_service_links'] = isset($data['map_service_links']) ? $data['map_service_links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location_category
     *
     * @return string[]
     */
    public function getLocationCategory()
    {
        return $this->container['location_category'];
    }

    /**
     * Sets location_category
     *
     * @param string[] $location_category location_category
     *
     * @return $this
     */
    public function setLocationCategory($location_category)
    {
        $allowedValues = $this->getLocationCategoryAllowableValues();
        if (!is_null($location_category) && array_diff($location_category, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'location_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['location_category'] = $location_category;

        return $this;
    }

    /**
     * Gets other_location_category
     *
     * @return \Yapily\Model\LocationOtherLocationCategory[]
     */
    public function getOtherLocationCategory()
    {
        return $this->container['other_location_category'];
    }

    /**
     * Sets other_location_category
     *
     * @param \Yapily\Model\LocationOtherLocationCategory[] $other_location_category other_location_category
     *
     * @return $this
     */
    public function setOtherLocationCategory($other_location_category)
    {
        $this->container['other_location_category'] = $other_location_category;

        return $this;
    }

    /**
     * Gets postal_address
     *
     * @return \Yapily\Model\PostalAddress1
     */
    public function getPostalAddress()
    {
        return $this->container['postal_address'];
    }

    /**
     * Sets postal_address
     *
     * @param \Yapily\Model\PostalAddress1 $postal_address postal_address
     *
     * @return $this
     */
    public function setPostalAddress($postal_address)
    {
        $this->container['postal_address'] = $postal_address;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \Yapily\Model\Site
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \Yapily\Model\Site $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets map_service_links
     *
     * @return \Yapily\Model\ATMMapServiceLinks
     */
    public function getMapServiceLinks()
    {
        return $this->container['map_service_links'];
    }

    /**
     * Sets map_service_links
     *
     * @param \Yapily\Model\ATMMapServiceLinks $map_service_links map_service_links
     *
     * @return $this
     */
    public function setMapServiceLinks($map_service_links)
    {
        $this->container['map_service_links'] = $map_service_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


