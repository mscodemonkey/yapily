<?php
/**
 * PeriodicPaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.161
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * PeriodicPaymentRequest Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PeriodicPaymentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PeriodicPaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'frequency' => '\Yapily\Model\FrequencyRequest',
        'number_of_payments' => 'int',
        'next_payment_date_time' => '\DateTime',
        'next_payment_amount' => '\Yapily\Model\Amount',
        'final_payment_date_time' => '\DateTime',
        'final_payment_amount' => '\Yapily\Model\Amount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'frequency' => null,
        'number_of_payments' => 'int32',
        'next_payment_date_time' => 'date-time',
        'next_payment_amount' => null,
        'final_payment_date_time' => 'date-time',
        'final_payment_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'frequency' => 'frequency',
        'number_of_payments' => 'numberOfPayments',
        'next_payment_date_time' => 'nextPaymentDateTime',
        'next_payment_amount' => 'nextPaymentAmount',
        'final_payment_date_time' => 'finalPaymentDateTime',
        'final_payment_amount' => 'finalPaymentAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'frequency' => 'setFrequency',
        'number_of_payments' => 'setNumberOfPayments',
        'next_payment_date_time' => 'setNextPaymentDateTime',
        'next_payment_amount' => 'setNextPaymentAmount',
        'final_payment_date_time' => 'setFinalPaymentDateTime',
        'final_payment_amount' => 'setFinalPaymentAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'frequency' => 'getFrequency',
        'number_of_payments' => 'getNumberOfPayments',
        'next_payment_date_time' => 'getNextPaymentDateTime',
        'next_payment_amount' => 'getNextPaymentAmount',
        'final_payment_date_time' => 'getFinalPaymentDateTime',
        'final_payment_amount' => 'getFinalPaymentAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['number_of_payments'] = isset($data['number_of_payments']) ? $data['number_of_payments'] : null;
        $this->container['next_payment_date_time'] = isset($data['next_payment_date_time']) ? $data['next_payment_date_time'] : null;
        $this->container['next_payment_amount'] = isset($data['next_payment_amount']) ? $data['next_payment_amount'] : null;
        $this->container['final_payment_date_time'] = isset($data['final_payment_date_time']) ? $data['final_payment_date_time'] : null;
        $this->container['final_payment_amount'] = isset($data['final_payment_amount']) ? $data['final_payment_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['frequency'] === null) {
            $invalidProperties[] = "'frequency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets frequency
     *
     * @return \Yapily\Model\FrequencyRequest
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param \Yapily\Model\FrequencyRequest $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets number_of_payments
     *
     * @return int
     */
    public function getNumberOfPayments()
    {
        return $this->container['number_of_payments'];
    }

    /**
     * Sets number_of_payments
     *
     * @param int $number_of_payments number_of_payments
     *
     * @return $this
     */
    public function setNumberOfPayments($number_of_payments)
    {
        $this->container['number_of_payments'] = $number_of_payments;

        return $this;
    }

    /**
     * Gets next_payment_date_time
     *
     * @return \DateTime
     */
    public function getNextPaymentDateTime()
    {
        return $this->container['next_payment_date_time'];
    }

    /**
     * Sets next_payment_date_time
     *
     * @param \DateTime $next_payment_date_time next_payment_date_time
     *
     * @return $this
     */
    public function setNextPaymentDateTime($next_payment_date_time)
    {
        $this->container['next_payment_date_time'] = $next_payment_date_time;

        return $this;
    }

    /**
     * Gets next_payment_amount
     *
     * @return \Yapily\Model\Amount
     */
    public function getNextPaymentAmount()
    {
        return $this->container['next_payment_amount'];
    }

    /**
     * Sets next_payment_amount
     *
     * @param \Yapily\Model\Amount $next_payment_amount next_payment_amount
     *
     * @return $this
     */
    public function setNextPaymentAmount($next_payment_amount)
    {
        $this->container['next_payment_amount'] = $next_payment_amount;

        return $this;
    }

    /**
     * Gets final_payment_date_time
     *
     * @return \DateTime
     */
    public function getFinalPaymentDateTime()
    {
        return $this->container['final_payment_date_time'];
    }

    /**
     * Sets final_payment_date_time
     *
     * @param \DateTime $final_payment_date_time final_payment_date_time
     *
     * @return $this
     */
    public function setFinalPaymentDateTime($final_payment_date_time)
    {
        $this->container['final_payment_date_time'] = $final_payment_date_time;

        return $this;
    }

    /**
     * Gets final_payment_amount
     *
     * @return \Yapily\Model\Amount
     */
    public function getFinalPaymentAmount()
    {
        return $this->container['final_payment_amount'];
    }

    /**
     * Sets final_payment_amount
     *
     * @param \Yapily\Model\Amount $final_payment_amount final_payment_amount
     *
     * @return $this
     */
    public function setFinalPaymentAmount($final_payment_amount)
    {
        $this->container['final_payment_amount'] = $final_payment_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


