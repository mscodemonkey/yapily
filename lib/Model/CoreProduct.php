<?php
/**
 * CoreProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your Application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * CoreProduct Class Doc Comment
 *
 * @category Class
 * @description Core feature of the PCA product which can be associated to a particular Marketing State
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CoreProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CoreProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'monthly_maximum_charge' => 'string',
        'product_description' => 'string',
        'product_url' => 'string',
        'sales_access_channels' => 'string[]',
        'servicing_access_channels' => 'string[]',
        'tcs_and_cs_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'monthly_maximum_charge' => null,
        'product_description' => null,
        'product_url' => null,
        'sales_access_channels' => null,
        'servicing_access_channels' => null,
        'tcs_and_cs_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'monthly_maximum_charge' => 'MonthlyMaximumCharge',
        'product_description' => 'ProductDescription',
        'product_url' => 'ProductURL',
        'sales_access_channels' => 'SalesAccessChannels',
        'servicing_access_channels' => 'ServicingAccessChannels',
        'tcs_and_cs_url' => 'TcsAndCsURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'monthly_maximum_charge' => 'setMonthlyMaximumCharge',
        'product_description' => 'setProductDescription',
        'product_url' => 'setProductUrl',
        'sales_access_channels' => 'setSalesAccessChannels',
        'servicing_access_channels' => 'setServicingAccessChannels',
        'tcs_and_cs_url' => 'setTcsAndCsUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'monthly_maximum_charge' => 'getMonthlyMaximumCharge',
        'product_description' => 'getProductDescription',
        'product_url' => 'getProductUrl',
        'sales_access_channels' => 'getSalesAccessChannels',
        'servicing_access_channels' => 'getServicingAccessChannels',
        'tcs_and_cs_url' => 'getTcsAndCsUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SALES_ACCESS_CHANNELS_BRANCH = 'Branch';
    const SALES_ACCESS_CHANNELS_CALL_CENTRE = 'CallCentre';
    const SALES_ACCESS_CHANNELS_POST = 'Post';
    const SALES_ACCESS_CHANNELS_ONLINE = 'Online';
    const SALES_ACCESS_CHANNELS_RELATIONSHIP_MANAGER = 'RelationshipManager';
    const SERVICING_ACCESS_CHANNELS_ATM = 'ATM';
    const SERVICING_ACCESS_CHANNELS_BRANCH = 'Branch';
    const SERVICING_ACCESS_CHANNELS_CALL_CENTRE = 'CallCentre';
    const SERVICING_ACCESS_CHANNELS_POST = 'Post';
    const SERVICING_ACCESS_CHANNELS_MOBILE_BANKING_APP = 'MobileBankingApp';
    const SERVICING_ACCESS_CHANNELS_ONLINE = 'Online';
    const SERVICING_ACCESS_CHANNELS_POST_OFFICE = 'PostOffice';
    const SERVICING_ACCESS_CHANNELS_RELATIONSHIP_MANAGER = 'RelationshipManager';
    const SERVICING_ACCESS_CHANNELS_TEXT = 'Text';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalesAccessChannelsAllowableValues()
    {
        return [
            self::SALES_ACCESS_CHANNELS_BRANCH,
            self::SALES_ACCESS_CHANNELS_CALL_CENTRE,
            self::SALES_ACCESS_CHANNELS_POST,
            self::SALES_ACCESS_CHANNELS_ONLINE,
            self::SALES_ACCESS_CHANNELS_RELATIONSHIP_MANAGER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServicingAccessChannelsAllowableValues()
    {
        return [
            self::SERVICING_ACCESS_CHANNELS_ATM,
            self::SERVICING_ACCESS_CHANNELS_BRANCH,
            self::SERVICING_ACCESS_CHANNELS_CALL_CENTRE,
            self::SERVICING_ACCESS_CHANNELS_POST,
            self::SERVICING_ACCESS_CHANNELS_MOBILE_BANKING_APP,
            self::SERVICING_ACCESS_CHANNELS_ONLINE,
            self::SERVICING_ACCESS_CHANNELS_POST_OFFICE,
            self::SERVICING_ACCESS_CHANNELS_RELATIONSHIP_MANAGER,
            self::SERVICING_ACCESS_CHANNELS_TEXT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['monthly_maximum_charge'] = isset($data['monthly_maximum_charge']) ? $data['monthly_maximum_charge'] : null;
        $this->container['product_description'] = isset($data['product_description']) ? $data['product_description'] : null;
        $this->container['product_url'] = isset($data['product_url']) ? $data['product_url'] : null;
        $this->container['sales_access_channels'] = isset($data['sales_access_channels']) ? $data['sales_access_channels'] : null;
        $this->container['servicing_access_channels'] = isset($data['servicing_access_channels']) ? $data['servicing_access_channels'] : null;
        $this->container['tcs_and_cs_url'] = isset($data['tcs_and_cs_url']) ? $data['tcs_and_cs_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets monthly_maximum_charge
     *
     * @return string
     */
    public function getMonthlyMaximumCharge()
    {
        return $this->container['monthly_maximum_charge'];
    }

    /**
     * Sets monthly_maximum_charge
     *
     * @param string $monthly_maximum_charge monthly_maximum_charge
     *
     * @return $this
     */
    public function setMonthlyMaximumCharge($monthly_maximum_charge)
    {
        $this->container['monthly_maximum_charge'] = $monthly_maximum_charge;

        return $this;
    }

    /**
     * Gets product_description
     *
     * @return string
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param string $product_description product_description
     *
     * @return $this
     */
    public function setProductDescription($product_description)
    {
        $this->container['product_description'] = $product_description;

        return $this;
    }

    /**
     * Gets product_url
     *
     * @return string
     */
    public function getProductUrl()
    {
        return $this->container['product_url'];
    }

    /**
     * Sets product_url
     *
     * @param string $product_url product_url
     *
     * @return $this
     */
    public function setProductUrl($product_url)
    {
        $this->container['product_url'] = $product_url;

        return $this;
    }

    /**
     * Gets sales_access_channels
     *
     * @return string[]
     */
    public function getSalesAccessChannels()
    {
        return $this->container['sales_access_channels'];
    }

    /**
     * Sets sales_access_channels
     *
     * @param string[] $sales_access_channels sales_access_channels
     *
     * @return $this
     */
    public function setSalesAccessChannels($sales_access_channels)
    {
        $allowedValues = $this->getSalesAccessChannelsAllowableValues();
        if (!is_null($sales_access_channels) && array_diff($sales_access_channels, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sales_access_channels', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sales_access_channels'] = $sales_access_channels;

        return $this;
    }

    /**
     * Gets servicing_access_channels
     *
     * @return string[]
     */
    public function getServicingAccessChannels()
    {
        return $this->container['servicing_access_channels'];
    }

    /**
     * Sets servicing_access_channels
     *
     * @param string[] $servicing_access_channels servicing_access_channels
     *
     * @return $this
     */
    public function setServicingAccessChannels($servicing_access_channels)
    {
        $allowedValues = $this->getServicingAccessChannelsAllowableValues();
        if (!is_null($servicing_access_channels) && array_diff($servicing_access_channels, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'servicing_access_channels', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['servicing_access_channels'] = $servicing_access_channels;

        return $this;
    }

    /**
     * Gets tcs_and_cs_url
     *
     * @return string
     */
    public function getTcsAndCsUrl()
    {
        return $this->container['tcs_and_cs_url'];
    }

    /**
     * Sets tcs_and_cs_url
     *
     * @param string $tcs_and_cs_url tcs_and_cs_url
     *
     * @return $this
     */
    public function setTcsAndCsUrl($tcs_and_cs_url)
    {
        $this->container['tcs_and_cs_url'] = $tcs_and_cs_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


