<?php
/**
 * InternationalPaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.161
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * InternationalPaymentRequest Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InternationalPaymentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InternationalPaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency_of_transfer' => 'string',
        'exchange_rate_information' => '\Yapily\Model\ExchangeRateInformation',
        'purpose' => 'string',
        'priority' => 'string',
        'charge_bearer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency_of_transfer' => null,
        'exchange_rate_information' => null,
        'purpose' => null,
        'priority' => null,
        'charge_bearer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_of_transfer' => 'currencyOfTransfer',
        'exchange_rate_information' => 'exchangeRateInformation',
        'purpose' => 'purpose',
        'priority' => 'priority',
        'charge_bearer' => 'chargeBearer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_of_transfer' => 'setCurrencyOfTransfer',
        'exchange_rate_information' => 'setExchangeRateInformation',
        'purpose' => 'setPurpose',
        'priority' => 'setPriority',
        'charge_bearer' => 'setChargeBearer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_of_transfer' => 'getCurrencyOfTransfer',
        'exchange_rate_information' => 'getExchangeRateInformation',
        'purpose' => 'getPurpose',
        'priority' => 'getPriority',
        'charge_bearer' => 'getChargeBearer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRIORITY_NORMAL = 'NORMAL';
    const PRIORITY_URGENT = 'URGENT';
    const CHARGE_BEARER_DEBT = 'DEBT';
    const CHARGE_BEARER_CRED = 'CRED';
    const CHARGE_BEARER_SHAR = 'SHAR';
    const CHARGE_BEARER_SLEV = 'SLEV';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_NORMAL,
            self::PRIORITY_URGENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChargeBearerAllowableValues()
    {
        return [
            self::CHARGE_BEARER_DEBT,
            self::CHARGE_BEARER_CRED,
            self::CHARGE_BEARER_SHAR,
            self::CHARGE_BEARER_SLEV,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_of_transfer'] = isset($data['currency_of_transfer']) ? $data['currency_of_transfer'] : null;
        $this->container['exchange_rate_information'] = isset($data['exchange_rate_information']) ? $data['exchange_rate_information'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['charge_bearer'] = isset($data['charge_bearer']) ? $data['charge_bearer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currency_of_transfer'] === null) {
            $invalidProperties[] = "'currency_of_transfer' can't be null";
        }
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChargeBearerAllowableValues();
        if (!is_null($this->container['charge_bearer']) && !in_array($this->container['charge_bearer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'charge_bearer', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_of_transfer
     *
     * @return string
     */
    public function getCurrencyOfTransfer()
    {
        return $this->container['currency_of_transfer'];
    }

    /**
     * Sets currency_of_transfer
     *
     * @param string $currency_of_transfer currency_of_transfer
     *
     * @return $this
     */
    public function setCurrencyOfTransfer($currency_of_transfer)
    {
        $this->container['currency_of_transfer'] = $currency_of_transfer;

        return $this;
    }

    /**
     * Gets exchange_rate_information
     *
     * @return \Yapily\Model\ExchangeRateInformation
     */
    public function getExchangeRateInformation()
    {
        return $this->container['exchange_rate_information'];
    }

    /**
     * Sets exchange_rate_information
     *
     * @param \Yapily\Model\ExchangeRateInformation $exchange_rate_information exchange_rate_information
     *
     * @return $this
     */
    public function setExchangeRateInformation($exchange_rate_information)
    {
        $this->container['exchange_rate_information'] = $exchange_rate_information;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose purpose
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets charge_bearer
     *
     * @return string
     */
    public function getChargeBearer()
    {
        return $this->container['charge_bearer'];
    }

    /**
     * Sets charge_bearer
     *
     * @param string $charge_bearer charge_bearer
     *
     * @return $this
     */
    public function setChargeBearer($charge_bearer)
    {
        $allowedValues = $this->getChargeBearerAllowableValues();
        if (!is_null($charge_bearer) && !in_array($charge_bearer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'charge_bearer', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['charge_bearer'] = $charge_bearer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


