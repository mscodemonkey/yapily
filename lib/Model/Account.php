<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.161
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Account implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'type' => 'string',
        'description' => 'string',
        'balance' => 'float',
        'currency' => 'string',
        'usage_type' => 'string',
        'account_type' => 'string',
        'nickname' => 'string',
        'details' => 'string',
        'account_names' => '\Yapily\Model\AccountName[]',
        'account_identifications' => '\Yapily\Model\AccountIdentification[]',
        'account_balances' => '\Yapily\Model\AccountBalance[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'description' => null,
        'balance' => null,
        'currency' => null,
        'usage_type' => null,
        'account_type' => null,
        'nickname' => null,
        'details' => null,
        'account_names' => null,
        'account_identifications' => null,
        'account_balances' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'description' => 'description',
        'balance' => 'balance',
        'currency' => 'currency',
        'usage_type' => 'usageType',
        'account_type' => 'accountType',
        'nickname' => 'nickname',
        'details' => 'details',
        'account_names' => 'accountNames',
        'account_identifications' => 'accountIdentifications',
        'account_balances' => 'accountBalances'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'description' => 'setDescription',
        'balance' => 'setBalance',
        'currency' => 'setCurrency',
        'usage_type' => 'setUsageType',
        'account_type' => 'setAccountType',
        'nickname' => 'setNickname',
        'details' => 'setDetails',
        'account_names' => 'setAccountNames',
        'account_identifications' => 'setAccountIdentifications',
        'account_balances' => 'setAccountBalances'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'description' => 'getDescription',
        'balance' => 'getBalance',
        'currency' => 'getCurrency',
        'usage_type' => 'getUsageType',
        'account_type' => 'getAccountType',
        'nickname' => 'getNickname',
        'details' => 'getDetails',
        'account_names' => 'getAccountNames',
        'account_identifications' => 'getAccountIdentifications',
        'account_balances' => 'getAccountBalances'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const USAGE_TYPE_PERSONAL = 'PERSONAL';
    const USAGE_TYPE_BUSINESS = 'BUSINESS';
    const USAGE_TYPE_OTHER = 'OTHER';
    const USAGE_TYPE_UNKNOWN = 'UNKNOWN';
    const ACCOUNT_TYPE_CASH_TRADING = 'CASH_TRADING';
    const ACCOUNT_TYPE_CASH_INCOME = 'CASH_INCOME';
    const ACCOUNT_TYPE_CASH_PAYMENT = 'CASH_PAYMENT';
    const ACCOUNT_TYPE_CHARGE_CARD = 'CHARGE_CARD';
    const ACCOUNT_TYPE_CHARGES = 'CHARGES';
    const ACCOUNT_TYPE_COMMISSION = 'COMMISSION';
    const ACCOUNT_TYPE_CREDIT_CARD = 'CREDIT_CARD';
    const ACCOUNT_TYPE_CURRENT = 'CURRENT';
    const ACCOUNT_TYPE_E_MONEY = 'E_MONEY';
    const ACCOUNT_TYPE_LIMITED_LIQUIDITY_SAVINGS_ACCOUNT = 'LIMITED_LIQUIDITY_SAVINGS_ACCOUNT';
    const ACCOUNT_TYPE_LOAN = 'LOAN';
    const ACCOUNT_TYPE_MARGINAL_LENDING = 'MARGINAL_LENDING';
    const ACCOUNT_TYPE_MONEY_MARKET = 'MONEY_MARKET';
    const ACCOUNT_TYPE_MORTGAGE = 'MORTGAGE';
    const ACCOUNT_TYPE_NON_RESIDENT_EXTERNAL = 'NON_RESIDENT_EXTERNAL';
    const ACCOUNT_TYPE_OTHER = 'OTHER';
    const ACCOUNT_TYPE_OVERDRAFT = 'OVERDRAFT';
    const ACCOUNT_TYPE_OVERNIGHT_DEPOSIT = 'OVERNIGHT_DEPOSIT';
    const ACCOUNT_TYPE_PREPAID_CARD = 'PREPAID_CARD';
    const ACCOUNT_TYPE_SALARY = 'SALARY';
    const ACCOUNT_TYPE_SAVINGS = 'SAVINGS';
    const ACCOUNT_TYPE_SETTLEMENT = 'SETTLEMENT';
    const ACCOUNT_TYPE_TAX = 'TAX';
    const ACCOUNT_TYPE_UNKNOWN = 'UNKNOWN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsageTypeAllowableValues()
    {
        return [
            self::USAGE_TYPE_PERSONAL,
            self::USAGE_TYPE_BUSINESS,
            self::USAGE_TYPE_OTHER,
            self::USAGE_TYPE_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_CASH_TRADING,
            self::ACCOUNT_TYPE_CASH_INCOME,
            self::ACCOUNT_TYPE_CASH_PAYMENT,
            self::ACCOUNT_TYPE_CHARGE_CARD,
            self::ACCOUNT_TYPE_CHARGES,
            self::ACCOUNT_TYPE_COMMISSION,
            self::ACCOUNT_TYPE_CREDIT_CARD,
            self::ACCOUNT_TYPE_CURRENT,
            self::ACCOUNT_TYPE_E_MONEY,
            self::ACCOUNT_TYPE_LIMITED_LIQUIDITY_SAVINGS_ACCOUNT,
            self::ACCOUNT_TYPE_LOAN,
            self::ACCOUNT_TYPE_MARGINAL_LENDING,
            self::ACCOUNT_TYPE_MONEY_MARKET,
            self::ACCOUNT_TYPE_MORTGAGE,
            self::ACCOUNT_TYPE_NON_RESIDENT_EXTERNAL,
            self::ACCOUNT_TYPE_OTHER,
            self::ACCOUNT_TYPE_OVERDRAFT,
            self::ACCOUNT_TYPE_OVERNIGHT_DEPOSIT,
            self::ACCOUNT_TYPE_PREPAID_CARD,
            self::ACCOUNT_TYPE_SALARY,
            self::ACCOUNT_TYPE_SAVINGS,
            self::ACCOUNT_TYPE_SETTLEMENT,
            self::ACCOUNT_TYPE_TAX,
            self::ACCOUNT_TYPE_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['usage_type'] = isset($data['usage_type']) ? $data['usage_type'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['account_names'] = isset($data['account_names']) ? $data['account_names'] : null;
        $this->container['account_identifications'] = isset($data['account_identifications']) ? $data['account_identifications'] : null;
        $this->container['account_balances'] = isset($data['account_balances']) ? $data['account_balances'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUsageTypeAllowableValues();
        if (!is_null($this->container['usage_type']) && !in_array($this->container['usage_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'usage_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'account_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Account Id returned by the institution if present
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Product name as defined by the financial institution for this account
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency ISO 4217 currency code
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets usage_type
     *
     * @return string
     */
    public function getUsageType()
    {
        return $this->container['usage_type'];
    }

    /**
     * Sets usage_type
     *
     * @param string $usage_type usage_type
     *
     * @return $this
     */
    public function setUsageType($usage_type)
    {
        $allowedValues = $this->getUsageTypeAllowableValues();
        if (!is_null($usage_type) && !in_array($usage_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'usage_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['usage_type'] = $usage_type;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type account_type
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($account_type) && !in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'account_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string $nickname Name of the account as defined by the financial institution or the end user
     *
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details Specifications that might be provided by the institution - characteristics of the account - characteristics of the relevant card
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets account_names
     *
     * @return \Yapily\Model\AccountName[]
     */
    public function getAccountNames()
    {
        return $this->container['account_names'];
    }

    /**
     * Sets account_names
     *
     * @param \Yapily\Model\AccountName[] $account_names account_names
     *
     * @return $this
     */
    public function setAccountNames($account_names)
    {
        $this->container['account_names'] = $account_names;

        return $this;
    }

    /**
     * Gets account_identifications
     *
     * @return \Yapily\Model\AccountIdentification[]
     */
    public function getAccountIdentifications()
    {
        return $this->container['account_identifications'];
    }

    /**
     * Sets account_identifications
     *
     * @param \Yapily\Model\AccountIdentification[] $account_identifications account_identifications
     *
     * @return $this
     */
    public function setAccountIdentifications($account_identifications)
    {
        $this->container['account_identifications'] = $account_identifications;

        return $this;
    }

    /**
     * Gets account_balances
     *
     * @return \Yapily\Model\AccountBalance[]
     */
    public function getAccountBalances()
    {
        return $this->container['account_balances'];
    }

    /**
     * Sets account_balances
     *
     * @param \Yapily\Model\AccountBalance[] $account_balances account_balances
     *
     * @return $this
     */
    public function setAccountBalances($account_balances)
    {
        $this->container['account_balances'] = $account_balances;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


