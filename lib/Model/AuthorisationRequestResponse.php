<?php
/**
 * AuthorisationRequestResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your Application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * AuthorisationRequestResponse Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthorisationRequestResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuthorisationRequestResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'user_uuid' => 'string',
        'institution_id' => 'string',
        'status' => 'string',
        'created_at' => '\DateTime',
        'expires_at' => '\DateTime',
        'time_to_expire_in_millis' => 'int',
        'feature_scope' => 'string[]',
        'authorisation_url' => 'string',
        'consent_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'user_uuid' => null,
        'institution_id' => null,
        'status' => null,
        'created_at' => 'date-time',
        'expires_at' => 'date-time',
        'time_to_expire_in_millis' => 'int64',
        'feature_scope' => null,
        'authorisation_url' => null,
        'consent_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_uuid' => 'userUuid',
        'institution_id' => 'institutionId',
        'status' => 'status',
        'created_at' => 'createdAt',
        'expires_at' => 'expiresAt',
        'time_to_expire_in_millis' => 'timeToExpireInMillis',
        'feature_scope' => 'featureScope',
        'authorisation_url' => 'authorisationUrl',
        'consent_token' => 'consentToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_uuid' => 'setUserUuid',
        'institution_id' => 'setInstitutionId',
        'status' => 'setStatus',
        'created_at' => 'setCreatedAt',
        'expires_at' => 'setExpiresAt',
        'time_to_expire_in_millis' => 'setTimeToExpireInMillis',
        'feature_scope' => 'setFeatureScope',
        'authorisation_url' => 'setAuthorisationUrl',
        'consent_token' => 'setConsentToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_uuid' => 'getUserUuid',
        'institution_id' => 'getInstitutionId',
        'status' => 'getStatus',
        'created_at' => 'getCreatedAt',
        'expires_at' => 'getExpiresAt',
        'time_to_expire_in_millis' => 'getTimeToExpireInMillis',
        'feature_scope' => 'getFeatureScope',
        'authorisation_url' => 'getAuthorisationUrl',
        'consent_token' => 'getConsentToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_AWAITING_AUTHORIZATION = 'AWAITING_AUTHORIZATION';
    const STATUS_AUTHORIZED = 'AUTHORIZED';
    const STATUS_REJECTED = 'REJECTED';
    const STATUS_REVOKED = 'REVOKED';
    const STATUS_FAILED = 'FAILED';
    const STATUS_EXPIRED = 'EXPIRED';
    const STATUS_UNKNOWN = 'UNKNOWN';
    const FEATURE_SCOPE_INITIATE_ACCOUNT_REQUEST = 'INITIATE_ACCOUNT_REQUEST';
    const FEATURE_SCOPE_ACCOUNT_REQUEST_DETAILS = 'ACCOUNT_REQUEST_DETAILS';
    const FEATURE_SCOPE_ACCOUNTS = 'ACCOUNTS';
    const FEATURE_SCOPE_ACCOUNT = 'ACCOUNT';
    const FEATURE_SCOPE_ACCOUNT_TRANSACTIONS = 'ACCOUNT_TRANSACTIONS';
    const FEATURE_SCOPE_ACCOUNT_TRANSACTIONS_WITH_MERCHANT = 'ACCOUNT_TRANSACTIONS_WITH_MERCHANT';
    const FEATURE_SCOPE_IDENTITY = 'IDENTITY';
    const FEATURE_SCOPE_INITIATE_SINGLE_PAYMENT_SORTCODE = 'INITIATE_SINGLE_PAYMENT_SORTCODE';
    const FEATURE_SCOPE_EXISTING_PAYMENT_INITIATION_DETAILS = 'EXISTING_PAYMENT_INITIATION_DETAILS';
    const FEATURE_SCOPE_CREATE_SINGLE_PAYMENT_SORTCODE = 'CREATE_SINGLE_PAYMENT_SORTCODE';
    const FEATURE_SCOPE_EXISTING_PAYMENTS_DETAILS = 'EXISTING_PAYMENTS_DETAILS';
    const FEATURE_SCOPE_TRANSFER = 'TRANSFER';
    const FEATURE_SCOPE_OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS = 'OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS';
    const FEATURE_SCOPE_OPEN_DATA_ATMS = 'OPEN_DATA_ATMS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AWAITING_AUTHORIZATION,
            self::STATUS_AUTHORIZED,
            self::STATUS_REJECTED,
            self::STATUS_REVOKED,
            self::STATUS_FAILED,
            self::STATUS_EXPIRED,
            self::STATUS_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureScopeAllowableValues()
    {
        return [
            self::FEATURE_SCOPE_INITIATE_ACCOUNT_REQUEST,
            self::FEATURE_SCOPE_ACCOUNT_REQUEST_DETAILS,
            self::FEATURE_SCOPE_ACCOUNTS,
            self::FEATURE_SCOPE_ACCOUNT,
            self::FEATURE_SCOPE_ACCOUNT_TRANSACTIONS,
            self::FEATURE_SCOPE_ACCOUNT_TRANSACTIONS_WITH_MERCHANT,
            self::FEATURE_SCOPE_IDENTITY,
            self::FEATURE_SCOPE_INITIATE_SINGLE_PAYMENT_SORTCODE,
            self::FEATURE_SCOPE_EXISTING_PAYMENT_INITIATION_DETAILS,
            self::FEATURE_SCOPE_CREATE_SINGLE_PAYMENT_SORTCODE,
            self::FEATURE_SCOPE_EXISTING_PAYMENTS_DETAILS,
            self::FEATURE_SCOPE_TRANSFER,
            self::FEATURE_SCOPE_OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS,
            self::FEATURE_SCOPE_OPEN_DATA_ATMS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['user_uuid'] = isset($data['user_uuid']) ? $data['user_uuid'] : null;
        $this->container['institution_id'] = isset($data['institution_id']) ? $data['institution_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['time_to_expire_in_millis'] = isset($data['time_to_expire_in_millis']) ? $data['time_to_expire_in_millis'] : null;
        $this->container['feature_scope'] = isset($data['feature_scope']) ? $data['feature_scope'] : null;
        $this->container['authorisation_url'] = isset($data['authorisation_url']) ? $data['authorisation_url'] : null;
        $this->container['consent_token'] = isset($data['consent_token']) ? $data['consent_token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_uuid
     *
     * @return string
     */
    public function getUserUuid()
    {
        return $this->container['user_uuid'];
    }

    /**
     * Sets user_uuid
     *
     * @param string $user_uuid user_uuid
     *
     * @return $this
     */
    public function setUserUuid($user_uuid)
    {
        $this->container['user_uuid'] = $user_uuid;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string $institution_id institution_id
     *
     * @return $this
     */
    public function setInstitutionId($institution_id)
    {
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime $expires_at expires_at
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets time_to_expire_in_millis
     *
     * @return int
     */
    public function getTimeToExpireInMillis()
    {
        return $this->container['time_to_expire_in_millis'];
    }

    /**
     * Sets time_to_expire_in_millis
     *
     * @param int $time_to_expire_in_millis Deprecated. Use `timeToExpire` instead.
     *
     * @return $this
     */
    public function setTimeToExpireInMillis($time_to_expire_in_millis)
    {
        $this->container['time_to_expire_in_millis'] = $time_to_expire_in_millis;

        return $this;
    }

    /**
     * Gets feature_scope
     *
     * @return string[]
     */
    public function getFeatureScope()
    {
        return $this->container['feature_scope'];
    }

    /**
     * Sets feature_scope
     *
     * @param string[] $feature_scope feature_scope
     *
     * @return $this
     */
    public function setFeatureScope($feature_scope)
    {
        $allowedValues = $this->getFeatureScopeAllowableValues();
        if (!is_null($feature_scope) && array_diff($feature_scope, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'feature_scope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feature_scope'] = $feature_scope;

        return $this;
    }

    /**
     * Gets authorisation_url
     *
     * @return string
     */
    public function getAuthorisationUrl()
    {
        return $this->container['authorisation_url'];
    }

    /**
     * Sets authorisation_url
     *
     * @param string $authorisation_url authorisation_url
     *
     * @return $this
     */
    public function setAuthorisationUrl($authorisation_url)
    {
        $this->container['authorisation_url'] = $authorisation_url;

        return $this;
    }

    /**
     * Gets consent_token
     *
     * @return string
     */
    public function getConsentToken()
    {
        return $this->container['consent_token'];
    }

    /**
     * Sets consent_token
     *
     * @param string $consent_token consent_token
     *
     * @return $this
     */
    public function setConsentToken($consent_token)
    {
        $this->container['consent_token'] = $consent_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


