<?php
/**
 * AccountBalance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.149
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * AccountBalance Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountBalance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountBalance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'date_time' => '\DateTime',
        'balance_amount' => '\Yapily\Model\Amount',
        'credit_line_included' => 'bool',
        'credit_lines' => '\Yapily\Model\CreditLine[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'date_time' => 'date-time',
        'balance_amount' => null,
        'credit_line_included' => null,
        'credit_lines' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'date_time' => 'dateTime',
        'balance_amount' => 'balanceAmount',
        'credit_line_included' => 'creditLineIncluded',
        'credit_lines' => 'creditLines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'date_time' => 'setDateTime',
        'balance_amount' => 'setBalanceAmount',
        'credit_line_included' => 'setCreditLineIncluded',
        'credit_lines' => 'setCreditLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'date_time' => 'getDateTime',
        'balance_amount' => 'getBalanceAmount',
        'credit_line_included' => 'getCreditLineIncluded',
        'credit_lines' => 'getCreditLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_CLOSING_AVAILABLE = 'CLOSING_AVAILABLE';
    const TYPE_CLOSING_BOOKED = 'CLOSING_BOOKED';
    const TYPE_CLOSING_CLEARED = 'CLOSING_CLEARED';
    const TYPE_EXPECTED = 'EXPECTED';
    const TYPE_FORWARD_AVAILABLE = 'FORWARD_AVAILABLE';
    const TYPE_INFORMATION = 'INFORMATION';
    const TYPE_INTERIM_AVAILABLE = 'INTERIM_AVAILABLE';
    const TYPE_INTERIM_BOOKED = 'INTERIM_BOOKED';
    const TYPE_INTERIM_CLEARED = 'INTERIM_CLEARED';
    const TYPE_OPENING_AVAILABLE = 'OPENING_AVAILABLE';
    const TYPE_OPENING_BOOKED = 'OPENING_BOOKED';
    const TYPE_OPENING_CLEARED = 'OPENING_CLEARED';
    const TYPE_PREVIOUSLY_CLOSED_BOOKED = 'PREVIOUSLY_CLOSED_BOOKED';
    const TYPE_AUTHORISED = 'AUTHORISED';
    const TYPE_OTHER = 'OTHER';
    const TYPE_UNKNOWN = 'UNKNOWN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CLOSING_AVAILABLE,
            self::TYPE_CLOSING_BOOKED,
            self::TYPE_CLOSING_CLEARED,
            self::TYPE_EXPECTED,
            self::TYPE_FORWARD_AVAILABLE,
            self::TYPE_INFORMATION,
            self::TYPE_INTERIM_AVAILABLE,
            self::TYPE_INTERIM_BOOKED,
            self::TYPE_INTERIM_CLEARED,
            self::TYPE_OPENING_AVAILABLE,
            self::TYPE_OPENING_BOOKED,
            self::TYPE_OPENING_CLEARED,
            self::TYPE_PREVIOUSLY_CLOSED_BOOKED,
            self::TYPE_AUTHORISED,
            self::TYPE_OTHER,
            self::TYPE_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['date_time'] = isset($data['date_time']) ? $data['date_time'] : null;
        $this->container['balance_amount'] = isset($data['balance_amount']) ? $data['balance_amount'] : null;
        $this->container['credit_line_included'] = isset($data['credit_line_included']) ? $data['credit_line_included'] : null;
        $this->container['credit_lines'] = isset($data['credit_lines']) ? $data['credit_lines'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets date_time
     *
     * @return \DateTime
     */
    public function getDateTime()
    {
        return $this->container['date_time'];
    }

    /**
     * Sets date_time
     *
     * @param \DateTime $date_time Timestamp of the last change of the balance amount
     *
     * @return $this
     */
    public function setDateTime($date_time)
    {
        $this->container['date_time'] = $date_time;

        return $this;
    }

    /**
     * Gets balance_amount
     *
     * @return \Yapily\Model\Amount
     */
    public function getBalanceAmount()
    {
        return $this->container['balance_amount'];
    }

    /**
     * Sets balance_amount
     *
     * @param \Yapily\Model\Amount $balance_amount balance_amount
     *
     * @return $this
     */
    public function setBalanceAmount($balance_amount)
    {
        $this->container['balance_amount'] = $balance_amount;

        return $this;
    }

    /**
     * Gets credit_line_included
     *
     * @return bool
     */
    public function getCreditLineIncluded()
    {
        return $this->container['credit_line_included'];
    }

    /**
     * Sets credit_line_included
     *
     * @param bool $credit_line_included Indicates whether or not the credit line is included in the balance
     *
     * @return $this
     */
    public function setCreditLineIncluded($credit_line_included)
    {
        $this->container['credit_line_included'] = $credit_line_included;

        return $this;
    }

    /**
     * Gets credit_lines
     *
     * @return \Yapily\Model\CreditLine[]
     */
    public function getCreditLines()
    {
        return $this->container['credit_lines'];
    }

    /**
     * Sets credit_lines
     *
     * @param \Yapily\Model\CreditLine[] $credit_lines credit_lines
     *
     * @return $this
     */
    public function setCreditLines($credit_lines)
    {
        $this->container['credit_lines'] = $credit_lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


