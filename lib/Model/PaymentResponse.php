<?php
/**
 * PaymentResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.149
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * PaymentResponse Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'payment_idempotency_id' => 'string',
        'institution_consent_id' => 'string',
        'payment_lifecycle_id' => 'string',
        'status' => 'string',
        'status_details' => '\Yapily\Model\PaymentStatusDetails',
        'payee_details' => '\Yapily\Model\Payee',
        'reference' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'amount_details' => '\Yapily\Model\Amount',
        'first_payment_amount' => '\Yapily\Model\Amount',
        'first_payment_date_time' => '\DateTime',
        'next_payment_amount' => '\Yapily\Model\Amount',
        'next_payment_date_time' => '\DateTime',
        'final_payment_amount' => '\Yapily\Model\Amount',
        'final_payment_date_time' => '\DateTime',
        'created_at' => '\DateTime',
        'previous_payment_amount' => '\Yapily\Model\Amount',
        'previous_payment_date_time' => '\DateTime',
        'charge_details' => '\Yapily\Model\ChargeDetails[]',
        'scheduled_payment_type' => 'string',
        'scheduled_payment_date_time' => '\DateTime',
        'frequency' => '\Yapily\Model\FrequencyResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'payment_idempotency_id' => null,
        'institution_consent_id' => null,
        'payment_lifecycle_id' => null,
        'status' => null,
        'status_details' => null,
        'payee_details' => null,
        'reference' => null,
        'amount' => null,
        'currency' => null,
        'amount_details' => null,
        'first_payment_amount' => null,
        'first_payment_date_time' => 'date-time',
        'next_payment_amount' => null,
        'next_payment_date_time' => 'date-time',
        'final_payment_amount' => null,
        'final_payment_date_time' => 'date-time',
        'created_at' => 'date-time',
        'previous_payment_amount' => null,
        'previous_payment_date_time' => 'date-time',
        'charge_details' => null,
        'scheduled_payment_type' => null,
        'scheduled_payment_date_time' => 'date-time',
        'frequency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'payment_idempotency_id' => 'paymentIdempotencyId',
        'institution_consent_id' => 'institutionConsentId',
        'payment_lifecycle_id' => 'paymentLifecycleId',
        'status' => 'status',
        'status_details' => 'statusDetails',
        'payee_details' => 'payeeDetails',
        'reference' => 'reference',
        'amount' => 'amount',
        'currency' => 'currency',
        'amount_details' => 'amountDetails',
        'first_payment_amount' => 'firstPaymentAmount',
        'first_payment_date_time' => 'firstPaymentDateTime',
        'next_payment_amount' => 'nextPaymentAmount',
        'next_payment_date_time' => 'nextPaymentDateTime',
        'final_payment_amount' => 'finalPaymentAmount',
        'final_payment_date_time' => 'finalPaymentDateTime',
        'created_at' => 'createdAt',
        'previous_payment_amount' => 'previousPaymentAmount',
        'previous_payment_date_time' => 'previousPaymentDateTime',
        'charge_details' => 'chargeDetails',
        'scheduled_payment_type' => 'scheduledPaymentType',
        'scheduled_payment_date_time' => 'scheduledPaymentDateTime',
        'frequency' => 'frequency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'payment_idempotency_id' => 'setPaymentIdempotencyId',
        'institution_consent_id' => 'setInstitutionConsentId',
        'payment_lifecycle_id' => 'setPaymentLifecycleId',
        'status' => 'setStatus',
        'status_details' => 'setStatusDetails',
        'payee_details' => 'setPayeeDetails',
        'reference' => 'setReference',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'amount_details' => 'setAmountDetails',
        'first_payment_amount' => 'setFirstPaymentAmount',
        'first_payment_date_time' => 'setFirstPaymentDateTime',
        'next_payment_amount' => 'setNextPaymentAmount',
        'next_payment_date_time' => 'setNextPaymentDateTime',
        'final_payment_amount' => 'setFinalPaymentAmount',
        'final_payment_date_time' => 'setFinalPaymentDateTime',
        'created_at' => 'setCreatedAt',
        'previous_payment_amount' => 'setPreviousPaymentAmount',
        'previous_payment_date_time' => 'setPreviousPaymentDateTime',
        'charge_details' => 'setChargeDetails',
        'scheduled_payment_type' => 'setScheduledPaymentType',
        'scheduled_payment_date_time' => 'setScheduledPaymentDateTime',
        'frequency' => 'setFrequency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'payment_idempotency_id' => 'getPaymentIdempotencyId',
        'institution_consent_id' => 'getInstitutionConsentId',
        'payment_lifecycle_id' => 'getPaymentLifecycleId',
        'status' => 'getStatus',
        'status_details' => 'getStatusDetails',
        'payee_details' => 'getPayeeDetails',
        'reference' => 'getReference',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'amount_details' => 'getAmountDetails',
        'first_payment_amount' => 'getFirstPaymentAmount',
        'first_payment_date_time' => 'getFirstPaymentDateTime',
        'next_payment_amount' => 'getNextPaymentAmount',
        'next_payment_date_time' => 'getNextPaymentDateTime',
        'final_payment_amount' => 'getFinalPaymentAmount',
        'final_payment_date_time' => 'getFinalPaymentDateTime',
        'created_at' => 'getCreatedAt',
        'previous_payment_amount' => 'getPreviousPaymentAmount',
        'previous_payment_date_time' => 'getPreviousPaymentDateTime',
        'charge_details' => 'getChargeDetails',
        'scheduled_payment_type' => 'getScheduledPaymentType',
        'scheduled_payment_date_time' => 'getScheduledPaymentDateTime',
        'frequency' => 'getFrequency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_PENDING = 'PENDING';
    const STATUS_FAILED = 'FAILED';
    const STATUS_DECLINED = 'DECLINED';
    const STATUS_COMPLETED = 'COMPLETED';
    const STATUS_EXPIRED = 'EXPIRED';
    const STATUS_UNKNOWN = 'UNKNOWN';
    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_INACTIVE = 'INACTIVE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_FAILED,
            self::STATUS_DECLINED,
            self::STATUS_COMPLETED,
            self::STATUS_EXPIRED,
            self::STATUS_UNKNOWN,
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['payment_idempotency_id'] = isset($data['payment_idempotency_id']) ? $data['payment_idempotency_id'] : null;
        $this->container['institution_consent_id'] = isset($data['institution_consent_id']) ? $data['institution_consent_id'] : null;
        $this->container['payment_lifecycle_id'] = isset($data['payment_lifecycle_id']) ? $data['payment_lifecycle_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_details'] = isset($data['status_details']) ? $data['status_details'] : null;
        $this->container['payee_details'] = isset($data['payee_details']) ? $data['payee_details'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['amount_details'] = isset($data['amount_details']) ? $data['amount_details'] : null;
        $this->container['first_payment_amount'] = isset($data['first_payment_amount']) ? $data['first_payment_amount'] : null;
        $this->container['first_payment_date_time'] = isset($data['first_payment_date_time']) ? $data['first_payment_date_time'] : null;
        $this->container['next_payment_amount'] = isset($data['next_payment_amount']) ? $data['next_payment_amount'] : null;
        $this->container['next_payment_date_time'] = isset($data['next_payment_date_time']) ? $data['next_payment_date_time'] : null;
        $this->container['final_payment_amount'] = isset($data['final_payment_amount']) ? $data['final_payment_amount'] : null;
        $this->container['final_payment_date_time'] = isset($data['final_payment_date_time']) ? $data['final_payment_date_time'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['previous_payment_amount'] = isset($data['previous_payment_amount']) ? $data['previous_payment_amount'] : null;
        $this->container['previous_payment_date_time'] = isset($data['previous_payment_date_time']) ? $data['previous_payment_date_time'] : null;
        $this->container['charge_details'] = isset($data['charge_details']) ? $data['charge_details'] : null;
        $this->container['scheduled_payment_type'] = isset($data['scheduled_payment_type']) ? $data['scheduled_payment_type'] : null;
        $this->container['scheduled_payment_date_time'] = isset($data['scheduled_payment_date_time']) ? $data['scheduled_payment_date_time'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payment_idempotency_id
     *
     * @return string
     */
    public function getPaymentIdempotencyId()
    {
        return $this->container['payment_idempotency_id'];
    }

    /**
     * Sets payment_idempotency_id
     *
     * @param string $payment_idempotency_id payment_idempotency_id
     *
     * @return $this
     */
    public function setPaymentIdempotencyId($payment_idempotency_id)
    {
        $this->container['payment_idempotency_id'] = $payment_idempotency_id;

        return $this;
    }

    /**
     * Gets institution_consent_id
     *
     * @return string
     */
    public function getInstitutionConsentId()
    {
        return $this->container['institution_consent_id'];
    }

    /**
     * Sets institution_consent_id
     *
     * @param string $institution_consent_id institution_consent_id
     *
     * @return $this
     */
    public function setInstitutionConsentId($institution_consent_id)
    {
        $this->container['institution_consent_id'] = $institution_consent_id;

        return $this;
    }

    /**
     * Gets payment_lifecycle_id
     *
     * @return string
     */
    public function getPaymentLifecycleId()
    {
        return $this->container['payment_lifecycle_id'];
    }

    /**
     * Sets payment_lifecycle_id
     *
     * @param string $payment_lifecycle_id payment_lifecycle_id
     *
     * @return $this
     */
    public function setPaymentLifecycleId($payment_lifecycle_id)
    {
        $this->container['payment_lifecycle_id'] = $payment_lifecycle_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_details
     *
     * @return \Yapily\Model\PaymentStatusDetails
     */
    public function getStatusDetails()
    {
        return $this->container['status_details'];
    }

    /**
     * Sets status_details
     *
     * @param \Yapily\Model\PaymentStatusDetails $status_details status_details
     *
     * @return $this
     */
    public function setStatusDetails($status_details)
    {
        $this->container['status_details'] = $status_details;

        return $this;
    }

    /**
     * Gets payee_details
     *
     * @return \Yapily\Model\Payee
     */
    public function getPayeeDetails()
    {
        return $this->container['payee_details'];
    }

    /**
     * Sets payee_details
     *
     * @param \Yapily\Model\Payee $payee_details payee_details
     *
     * @return $this
     */
    public function setPayeeDetails($payee_details)
    {
        $this->container['payee_details'] = $payee_details;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets amount_details
     *
     * @return \Yapily\Model\Amount
     */
    public function getAmountDetails()
    {
        return $this->container['amount_details'];
    }

    /**
     * Sets amount_details
     *
     * @param \Yapily\Model\Amount $amount_details amount_details
     *
     * @return $this
     */
    public function setAmountDetails($amount_details)
    {
        $this->container['amount_details'] = $amount_details;

        return $this;
    }

    /**
     * Gets first_payment_amount
     *
     * @return \Yapily\Model\Amount
     */
    public function getFirstPaymentAmount()
    {
        return $this->container['first_payment_amount'];
    }

    /**
     * Sets first_payment_amount
     *
     * @param \Yapily\Model\Amount $first_payment_amount first_payment_amount
     *
     * @return $this
     */
    public function setFirstPaymentAmount($first_payment_amount)
    {
        $this->container['first_payment_amount'] = $first_payment_amount;

        return $this;
    }

    /**
     * Gets first_payment_date_time
     *
     * @return \DateTime
     */
    public function getFirstPaymentDateTime()
    {
        return $this->container['first_payment_date_time'];
    }

    /**
     * Sets first_payment_date_time
     *
     * @param \DateTime $first_payment_date_time first_payment_date_time
     *
     * @return $this
     */
    public function setFirstPaymentDateTime($first_payment_date_time)
    {
        $this->container['first_payment_date_time'] = $first_payment_date_time;

        return $this;
    }

    /**
     * Gets next_payment_amount
     *
     * @return \Yapily\Model\Amount
     */
    public function getNextPaymentAmount()
    {
        return $this->container['next_payment_amount'];
    }

    /**
     * Sets next_payment_amount
     *
     * @param \Yapily\Model\Amount $next_payment_amount next_payment_amount
     *
     * @return $this
     */
    public function setNextPaymentAmount($next_payment_amount)
    {
        $this->container['next_payment_amount'] = $next_payment_amount;

        return $this;
    }

    /**
     * Gets next_payment_date_time
     *
     * @return \DateTime
     */
    public function getNextPaymentDateTime()
    {
        return $this->container['next_payment_date_time'];
    }

    /**
     * Sets next_payment_date_time
     *
     * @param \DateTime $next_payment_date_time next_payment_date_time
     *
     * @return $this
     */
    public function setNextPaymentDateTime($next_payment_date_time)
    {
        $this->container['next_payment_date_time'] = $next_payment_date_time;

        return $this;
    }

    /**
     * Gets final_payment_amount
     *
     * @return \Yapily\Model\Amount
     */
    public function getFinalPaymentAmount()
    {
        return $this->container['final_payment_amount'];
    }

    /**
     * Sets final_payment_amount
     *
     * @param \Yapily\Model\Amount $final_payment_amount final_payment_amount
     *
     * @return $this
     */
    public function setFinalPaymentAmount($final_payment_amount)
    {
        $this->container['final_payment_amount'] = $final_payment_amount;

        return $this;
    }

    /**
     * Gets final_payment_date_time
     *
     * @return \DateTime
     */
    public function getFinalPaymentDateTime()
    {
        return $this->container['final_payment_date_time'];
    }

    /**
     * Sets final_payment_date_time
     *
     * @param \DateTime $final_payment_date_time final_payment_date_time
     *
     * @return $this
     */
    public function setFinalPaymentDateTime($final_payment_date_time)
    {
        $this->container['final_payment_date_time'] = $final_payment_date_time;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets previous_payment_amount
     *
     * @return \Yapily\Model\Amount
     */
    public function getPreviousPaymentAmount()
    {
        return $this->container['previous_payment_amount'];
    }

    /**
     * Sets previous_payment_amount
     *
     * @param \Yapily\Model\Amount $previous_payment_amount previous_payment_amount
     *
     * @return $this
     */
    public function setPreviousPaymentAmount($previous_payment_amount)
    {
        $this->container['previous_payment_amount'] = $previous_payment_amount;

        return $this;
    }

    /**
     * Gets previous_payment_date_time
     *
     * @return \DateTime
     */
    public function getPreviousPaymentDateTime()
    {
        return $this->container['previous_payment_date_time'];
    }

    /**
     * Sets previous_payment_date_time
     *
     * @param \DateTime $previous_payment_date_time previous_payment_date_time
     *
     * @return $this
     */
    public function setPreviousPaymentDateTime($previous_payment_date_time)
    {
        $this->container['previous_payment_date_time'] = $previous_payment_date_time;

        return $this;
    }

    /**
     * Gets charge_details
     *
     * @return \Yapily\Model\ChargeDetails[]
     */
    public function getChargeDetails()
    {
        return $this->container['charge_details'];
    }

    /**
     * Sets charge_details
     *
     * @param \Yapily\Model\ChargeDetails[] $charge_details charge_details
     *
     * @return $this
     */
    public function setChargeDetails($charge_details)
    {
        $this->container['charge_details'] = $charge_details;

        return $this;
    }

    /**
     * Gets scheduled_payment_type
     *
     * @return string
     */
    public function getScheduledPaymentType()
    {
        return $this->container['scheduled_payment_type'];
    }

    /**
     * Sets scheduled_payment_type
     *
     * @param string $scheduled_payment_type scheduled_payment_type
     *
     * @return $this
     */
    public function setScheduledPaymentType($scheduled_payment_type)
    {
        $this->container['scheduled_payment_type'] = $scheduled_payment_type;

        return $this;
    }

    /**
     * Gets scheduled_payment_date_time
     *
     * @return \DateTime
     */
    public function getScheduledPaymentDateTime()
    {
        return $this->container['scheduled_payment_date_time'];
    }

    /**
     * Sets scheduled_payment_date_time
     *
     * @param \DateTime $scheduled_payment_date_time scheduled_payment_date_time
     *
     * @return $this
     */
    public function setScheduledPaymentDateTime($scheduled_payment_date_time)
    {
        $this->container['scheduled_payment_date_time'] = $scheduled_payment_date_time;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return \Yapily\Model\FrequencyResponse
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param \Yapily\Model\FrequencyResponse $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


