<?php
/**
 * InlineResponse2001ATM
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.161
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * InlineResponse2001ATM Class Doc Comment
 *
 * @category Class
 * @description ATM information.
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001ATM implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InlineResponse2001ATM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'atm_services' => 'string[]',
        'access24_hours_indicator' => 'bool',
        'accessibility' => 'string[]',
        'branch' => '\Yapily\Model\Branch',
        'identification' => 'string',
        'location' => '\Yapily\Model\Location',
        'minimum_possible_amount' => 'string',
        'note' => 'string[]',
        'other_atm_services' => '\Yapily\Model\InlineResponse2001OtherATMServices[]',
        'other_accessibility' => '\Yapily\Model\InlineResponse2001OtherAccessibility[]',
        'supported_currencies' => 'string[]',
        'supported_languages' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'atm_services' => null,
        'access24_hours_indicator' => null,
        'accessibility' => null,
        'branch' => null,
        'identification' => null,
        'location' => null,
        'minimum_possible_amount' => null,
        'note' => null,
        'other_atm_services' => null,
        'other_accessibility' => null,
        'supported_currencies' => null,
        'supported_languages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'atm_services' => 'ATMServices',
        'access24_hours_indicator' => 'Access24HoursIndicator',
        'accessibility' => 'Accessibility',
        'branch' => 'Branch',
        'identification' => 'Identification',
        'location' => 'Location',
        'minimum_possible_amount' => 'MinimumPossibleAmount',
        'note' => 'Note',
        'other_atm_services' => 'OtherATMServices',
        'other_accessibility' => 'OtherAccessibility',
        'supported_currencies' => 'SupportedCurrencies',
        'supported_languages' => 'SupportedLanguages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'atm_services' => 'setAtmServices',
        'access24_hours_indicator' => 'setAccess24HoursIndicator',
        'accessibility' => 'setAccessibility',
        'branch' => 'setBranch',
        'identification' => 'setIdentification',
        'location' => 'setLocation',
        'minimum_possible_amount' => 'setMinimumPossibleAmount',
        'note' => 'setNote',
        'other_atm_services' => 'setOtherAtmServices',
        'other_accessibility' => 'setOtherAccessibility',
        'supported_currencies' => 'setSupportedCurrencies',
        'supported_languages' => 'setSupportedLanguages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'atm_services' => 'getAtmServices',
        'access24_hours_indicator' => 'getAccess24HoursIndicator',
        'accessibility' => 'getAccessibility',
        'branch' => 'getBranch',
        'identification' => 'getIdentification',
        'location' => 'getLocation',
        'minimum_possible_amount' => 'getMinimumPossibleAmount',
        'note' => 'getNote',
        'other_atm_services' => 'getOtherAtmServices',
        'other_accessibility' => 'getOtherAccessibility',
        'supported_currencies' => 'getSupportedCurrencies',
        'supported_languages' => 'getSupportedLanguages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ATM_SERVICES_BALANCE = 'Balance';
    const ATM_SERVICES_BILL_PAYMENTS = 'BillPayments';
    const ATM_SERVICES_CASH_DEPOSITS = 'CashDeposits';
    const ATM_SERVICES_CHARITY_DONATION = 'CharityDonation';
    const ATM_SERVICES_CHEQUE_DEPOSITS = 'ChequeDeposits';
    const ATM_SERVICES_CASH_WITHDRAWAL = 'CashWithdrawal';
    const ATM_SERVICES_ENVELOPE_DEPOSIT = 'EnvelopeDeposit';
    const ATM_SERVICES_FAST_CASH = 'FastCash';
    const ATM_SERVICES_MOBILE_BANKING_REGISTRATION = 'MobileBankingRegistration';
    const ATM_SERVICES_MOBILE_PAYMENT_REGISTRATION = 'MobilePaymentRegistration';
    const ATM_SERVICES_MOBILE_PHONE_TOP_UP = 'MobilePhoneTopUp';
    const ATM_SERVICES_ORDER_STATEMENT = 'OrderStatement';
    const ATM_SERVICES_OTHER = 'Other';
    const ATM_SERVICES_PIN_ACTIVATION = 'PINActivation';
    const ATM_SERVICES_PIN_CHANGE = 'PINChange';
    const ATM_SERVICES_PIN_UNBLOCK = 'PINUnblock';
    const ATM_SERVICES_MINI_STATEMENT = 'MiniStatement';
    const ACCESSIBILITY_AUDIO_CASH_MACHINE = 'AudioCashMachine';
    const ACCESSIBILITY_AUTOMATIC_DOORS = 'AutomaticDoors';
    const ACCESSIBILITY_EXTERNAL_RAMP = 'ExternalRamp';
    const ACCESSIBILITY_INDUCTION_LOOP = 'InductionLoop';
    const ACCESSIBILITY_INTERNAL_RAMP = 'InternalRamp';
    const ACCESSIBILITY_LEVEL_ACCESS = 'LevelAccess';
    const ACCESSIBILITY_LOWER_LEVEL_COUNTER = 'LowerLevelCounter';
    const ACCESSIBILITY_OTHER = 'Other';
    const ACCESSIBILITY_WHEELCHAIR_ACCESS = 'WheelchairAccess';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAtmServicesAllowableValues()
    {
        return [
            self::ATM_SERVICES_BALANCE,
            self::ATM_SERVICES_BILL_PAYMENTS,
            self::ATM_SERVICES_CASH_DEPOSITS,
            self::ATM_SERVICES_CHARITY_DONATION,
            self::ATM_SERVICES_CHEQUE_DEPOSITS,
            self::ATM_SERVICES_CASH_WITHDRAWAL,
            self::ATM_SERVICES_ENVELOPE_DEPOSIT,
            self::ATM_SERVICES_FAST_CASH,
            self::ATM_SERVICES_MOBILE_BANKING_REGISTRATION,
            self::ATM_SERVICES_MOBILE_PAYMENT_REGISTRATION,
            self::ATM_SERVICES_MOBILE_PHONE_TOP_UP,
            self::ATM_SERVICES_ORDER_STATEMENT,
            self::ATM_SERVICES_OTHER,
            self::ATM_SERVICES_PIN_ACTIVATION,
            self::ATM_SERVICES_PIN_CHANGE,
            self::ATM_SERVICES_PIN_UNBLOCK,
            self::ATM_SERVICES_MINI_STATEMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessibilityAllowableValues()
    {
        return [
            self::ACCESSIBILITY_AUDIO_CASH_MACHINE,
            self::ACCESSIBILITY_AUTOMATIC_DOORS,
            self::ACCESSIBILITY_EXTERNAL_RAMP,
            self::ACCESSIBILITY_INDUCTION_LOOP,
            self::ACCESSIBILITY_INTERNAL_RAMP,
            self::ACCESSIBILITY_LEVEL_ACCESS,
            self::ACCESSIBILITY_LOWER_LEVEL_COUNTER,
            self::ACCESSIBILITY_OTHER,
            self::ACCESSIBILITY_WHEELCHAIR_ACCESS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['atm_services'] = isset($data['atm_services']) ? $data['atm_services'] : null;
        $this->container['access24_hours_indicator'] = isset($data['access24_hours_indicator']) ? $data['access24_hours_indicator'] : null;
        $this->container['accessibility'] = isset($data['accessibility']) ? $data['accessibility'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['identification'] = isset($data['identification']) ? $data['identification'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['minimum_possible_amount'] = isset($data['minimum_possible_amount']) ? $data['minimum_possible_amount'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['other_atm_services'] = isset($data['other_atm_services']) ? $data['other_atm_services'] : null;
        $this->container['other_accessibility'] = isset($data['other_accessibility']) ? $data['other_accessibility'] : null;
        $this->container['supported_currencies'] = isset($data['supported_currencies']) ? $data['supported_currencies'] : null;
        $this->container['supported_languages'] = isset($data['supported_languages']) ? $data['supported_languages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets atm_services
     *
     * @return string[]
     */
    public function getAtmServices()
    {
        return $this->container['atm_services'];
    }

    /**
     * Sets atm_services
     *
     * @param string[] $atm_services atm_services
     *
     * @return $this
     */
    public function setAtmServices($atm_services)
    {
        $allowedValues = $this->getAtmServicesAllowableValues();
        if (!is_null($atm_services) && array_diff($atm_services, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'atm_services', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['atm_services'] = $atm_services;

        return $this;
    }

    /**
     * Gets access24_hours_indicator
     *
     * @return bool
     */
    public function getAccess24HoursIndicator()
    {
        return $this->container['access24_hours_indicator'];
    }

    /**
     * Sets access24_hours_indicator
     *
     * @param bool $access24_hours_indicator access24_hours_indicator
     *
     * @return $this
     */
    public function setAccess24HoursIndicator($access24_hours_indicator)
    {
        $this->container['access24_hours_indicator'] = $access24_hours_indicator;

        return $this;
    }

    /**
     * Gets accessibility
     *
     * @return string[]
     */
    public function getAccessibility()
    {
        return $this->container['accessibility'];
    }

    /**
     * Sets accessibility
     *
     * @param string[] $accessibility accessibility
     *
     * @return $this
     */
    public function setAccessibility($accessibility)
    {
        $allowedValues = $this->getAccessibilityAllowableValues();
        if (!is_null($accessibility) && array_diff($accessibility, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accessibility', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accessibility'] = $accessibility;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return \Yapily\Model\Branch
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param \Yapily\Model\Branch $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return string
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param string $identification identification
     *
     * @return $this
     */
    public function setIdentification($identification)
    {
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Yapily\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Yapily\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets minimum_possible_amount
     *
     * @return string
     */
    public function getMinimumPossibleAmount()
    {
        return $this->container['minimum_possible_amount'];
    }

    /**
     * Sets minimum_possible_amount
     *
     * @param string $minimum_possible_amount minimum_possible_amount
     *
     * @return $this
     */
    public function setMinimumPossibleAmount($minimum_possible_amount)
    {
        $this->container['minimum_possible_amount'] = $minimum_possible_amount;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string[]
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string[] $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets other_atm_services
     *
     * @return \Yapily\Model\InlineResponse2001OtherATMServices[]
     */
    public function getOtherAtmServices()
    {
        return $this->container['other_atm_services'];
    }

    /**
     * Sets other_atm_services
     *
     * @param \Yapily\Model\InlineResponse2001OtherATMServices[] $other_atm_services other_atm_services
     *
     * @return $this
     */
    public function setOtherAtmServices($other_atm_services)
    {
        $this->container['other_atm_services'] = $other_atm_services;

        return $this;
    }

    /**
     * Gets other_accessibility
     *
     * @return \Yapily\Model\InlineResponse2001OtherAccessibility[]
     */
    public function getOtherAccessibility()
    {
        return $this->container['other_accessibility'];
    }

    /**
     * Sets other_accessibility
     *
     * @param \Yapily\Model\InlineResponse2001OtherAccessibility[] $other_accessibility other_accessibility
     *
     * @return $this
     */
    public function setOtherAccessibility($other_accessibility)
    {
        $this->container['other_accessibility'] = $other_accessibility;

        return $this;
    }

    /**
     * Gets supported_currencies
     *
     * @return string[]
     */
    public function getSupportedCurrencies()
    {
        return $this->container['supported_currencies'];
    }

    /**
     * Sets supported_currencies
     *
     * @param string[] $supported_currencies supported_currencies
     *
     * @return $this
     */
    public function setSupportedCurrencies($supported_currencies)
    {
        $this->container['supported_currencies'] = $supported_currencies;

        return $this;
    }

    /**
     * Gets supported_languages
     *
     * @return string[]
     */
    public function getSupportedLanguages()
    {
        return $this->container['supported_languages'];
    }

    /**
     * Sets supported_languages
     *
     * @param string[] $supported_languages supported_languages
     *
     * @return $this
     */
    public function setSupportedLanguages($supported_languages)
    {
        $this->container['supported_languages'] = $supported_languages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


