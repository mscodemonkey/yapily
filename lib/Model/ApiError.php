<?php
/**
 * ApiError
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.149
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * ApiError Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiError implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApiError';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'int',
        'message' => 'string',
        'source' => 'string',
        'status' => 'string',
        'tracing_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => 'int32',
        'message' => null,
        'source' => null,
        'status' => null,
        'tracing_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'source' => 'source',
        'status' => 'status',
        'tracing_id' => 'tracingId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'source' => 'setSource',
        'status' => 'setStatus',
        'tracing_id' => 'setTracingId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'source' => 'getSource',
        'status' => 'getStatus',
        'tracing_id' => 'getTracingId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS__400 = '400';
    const STATUS__401 = '401';
    const STATUS__402 = '402';
    const STATUS__403 = '403';
    const STATUS__404 = '404';
    const STATUS__405 = '405';
    const STATUS__406 = '406';
    const STATUS__407 = '407';
    const STATUS__408 = '408';
    const STATUS__409 = '409';
    const STATUS__410 = '410';
    const STATUS__411 = '411';
    const STATUS__412 = '412';
    const STATUS__413 = '413';
    const STATUS__414 = '414';
    const STATUS__415 = '415';
    const STATUS__416 = '416';
    const STATUS__417 = '417';
    const STATUS__418 = '418';
    const STATUS__419 = '419';
    const STATUS__420 = '420';
    const STATUS__421 = '421';
    const STATUS__422 = '422';
    const STATUS__423 = '423';
    const STATUS__424 = '424';
    const STATUS__426 = '426';
    const STATUS__428 = '428';
    const STATUS__429 = '429';
    const STATUS__431 = '431';
    const STATUS__451 = '451';
    const STATUS__500 = '500';
    const STATUS__501 = '501';
    const STATUS__502 = '502';
    const STATUS__503 = '503';
    const STATUS__504 = '504';
    const STATUS__505 = '505';
    const STATUS__506 = '506';
    const STATUS__507 = '507';
    const STATUS__508 = '508';
    const STATUS__509 = '509';
    const STATUS__510 = '510';
    const STATUS__511 = '511';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS__400,
            self::STATUS__401,
            self::STATUS__402,
            self::STATUS__403,
            self::STATUS__404,
            self::STATUS__405,
            self::STATUS__406,
            self::STATUS__407,
            self::STATUS__408,
            self::STATUS__409,
            self::STATUS__410,
            self::STATUS__411,
            self::STATUS__412,
            self::STATUS__413,
            self::STATUS__414,
            self::STATUS__415,
            self::STATUS__416,
            self::STATUS__417,
            self::STATUS__418,
            self::STATUS__419,
            self::STATUS__420,
            self::STATUS__421,
            self::STATUS__422,
            self::STATUS__423,
            self::STATUS__424,
            self::STATUS__426,
            self::STATUS__428,
            self::STATUS__429,
            self::STATUS__431,
            self::STATUS__451,
            self::STATUS__500,
            self::STATUS__501,
            self::STATUS__502,
            self::STATUS__503,
            self::STATUS__504,
            self::STATUS__505,
            self::STATUS__506,
            self::STATUS__507,
            self::STATUS__508,
            self::STATUS__509,
            self::STATUS__510,
            self::STATUS__511,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tracing_id'] = isset($data['tracing_id']) ? $data['tracing_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return int
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param int $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tracing_id
     *
     * @return string
     */
    public function getTracingId()
    {
        return $this->container['tracing_id'];
    }

    /**
     * Sets tracing_id
     *
     * @param string $tracing_id tracing_id
     *
     * @return $this
     */
    public function setTracingId($tracing_id)
    {
        $this->container['tracing_id'] = $tracing_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


