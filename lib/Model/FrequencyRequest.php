<?php
/**
 * FrequencyRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.161
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * FrequencyRequest Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FrequencyRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FrequencyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'interval_week' => 'int',
        'interval_month' => 'int',
        'execution_day' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'interval_week' => 'int32',
        'interval_month' => 'int32',
        'execution_day' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'interval_week' => 'intervalWeek',
        'interval_month' => 'intervalMonth',
        'execution_day' => 'executionDay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'interval_week' => 'setIntervalWeek',
        'interval_month' => 'setIntervalMonth',
        'execution_day' => 'setExecutionDay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'interval_week' => 'getIntervalWeek',
        'interval_month' => 'getIntervalMonth',
        'execution_day' => 'getExecutionDay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_DAILY = 'DAILY';
    const TYPE_EVERY_WORKING_DAY = 'EVERY_WORKING_DAY';
    const TYPE_CALENDAR_DAY = 'CALENDAR_DAY';
    const TYPE_WEEKLY = 'WEEKLY';
    const TYPE_EVERY_TWO_WEEKS = 'EVERY_TWO_WEEKS';
    const TYPE_MONTHLY = 'MONTHLY';
    const TYPE_EVERY_TWO_MONTHS = 'EVERY_TWO_MONTHS';
    const TYPE_QUARTERLY = 'QUARTERLY';
    const TYPE_SEMIANNUAL = 'SEMIANNUAL';
    const TYPE_ANNUAL = 'ANNUAL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DAILY,
            self::TYPE_EVERY_WORKING_DAY,
            self::TYPE_CALENDAR_DAY,
            self::TYPE_WEEKLY,
            self::TYPE_EVERY_TWO_WEEKS,
            self::TYPE_MONTHLY,
            self::TYPE_EVERY_TWO_MONTHS,
            self::TYPE_QUARTERLY,
            self::TYPE_SEMIANNUAL,
            self::TYPE_ANNUAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['interval_week'] = isset($data['interval_week']) ? $data['interval_week'] : null;
        $this->container['interval_month'] = isset($data['interval_month']) ? $data['interval_month'] : null;
        $this->container['execution_day'] = isset($data['execution_day']) ? $data['execution_day'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets interval_week
     *
     * @return int
     */
    public function getIntervalWeek()
    {
        return $this->container['interval_week'];
    }

    /**
     * Sets interval_week
     *
     * @param int $interval_week interval_week
     *
     * @return $this
     */
    public function setIntervalWeek($interval_week)
    {
        $this->container['interval_week'] = $interval_week;

        return $this;
    }

    /**
     * Gets interval_month
     *
     * @return int
     */
    public function getIntervalMonth()
    {
        return $this->container['interval_month'];
    }

    /**
     * Sets interval_month
     *
     * @param int $interval_month interval_month
     *
     * @return $this
     */
    public function setIntervalMonth($interval_month)
    {
        $this->container['interval_month'] = $interval_month;

        return $this;
    }

    /**
     * Gets execution_day
     *
     * @return int
     */
    public function getExecutionDay()
    {
        return $this->container['execution_day'];
    }

    /**
     * Sets execution_day
     *
     * @param int $execution_day execution_day
     *
     * @return $this
     */
    public function setExecutionDay($execution_day)
    {
        $this->container['execution_day'] = $execution_day;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


