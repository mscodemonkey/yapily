<?php
/**
 * FeatureDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.149
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * FeatureDetails Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeatureDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeatureDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'feature' => 'string',
        'endpoint' => 'string',
        'documentation_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'feature' => null,
        'endpoint' => null,
        'documentation_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feature' => 'feature',
        'endpoint' => 'endpoint',
        'documentation_url' => 'documentationUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feature' => 'setFeature',
        'endpoint' => 'setEndpoint',
        'documentation_url' => 'setDocumentationUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feature' => 'getFeature',
        'endpoint' => 'getEndpoint',
        'documentation_url' => 'getDocumentationUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FEATURE_INITIATE_ACCOUNT_REQUEST = 'INITIATE_ACCOUNT_REQUEST';
    const FEATURE_ACCOUNT_REQUEST_DETAILS = 'ACCOUNT_REQUEST_DETAILS';
    const FEATURE_ACCOUNTS = 'ACCOUNTS';
    const FEATURE_ACCOUNT = 'ACCOUNT';
    const FEATURE_ACCOUNT_TRANSACTIONS = 'ACCOUNT_TRANSACTIONS';
    const FEATURE_ACCOUNT_STATEMENTS = 'ACCOUNT_STATEMENTS';
    const FEATURE_ACCOUNT_STATEMENT = 'ACCOUNT_STATEMENT';
    const FEATURE_ACCOUNT_STATEMENT_FILE = 'ACCOUNT_STATEMENT_FILE';
    const FEATURE_ACCOUNT_SCHEDULED_PAYMENTS = 'ACCOUNT_SCHEDULED_PAYMENTS';
    const FEATURE_ACCOUNT_DIRECT_DEBITS = 'ACCOUNT_DIRECT_DEBITS';
    const FEATURE_ACCOUNT_PERIODIC_PAYMENTS = 'ACCOUNT_PERIODIC_PAYMENTS';
    const FEATURE_ACCOUNT_TRANSACTIONS_WITH_MERCHANT = 'ACCOUNT_TRANSACTIONS_WITH_MERCHANT';
    const FEATURE_IDENTITY = 'IDENTITY';
    const FEATURE_INITIATE_SINGLE_PAYMENT_SORTCODE = 'INITIATE_SINGLE_PAYMENT_SORTCODE';
    const FEATURE_EXISTING_PAYMENT_INITIATION_DETAILS = 'EXISTING_PAYMENT_INITIATION_DETAILS';
    const FEATURE_CREATE_SINGLE_PAYMENT_SORTCODE = 'CREATE_SINGLE_PAYMENT_SORTCODE';
    const FEATURE_EXISTING_PAYMENTS_DETAILS = 'EXISTING_PAYMENTS_DETAILS';
    const FEATURE_INITIATE_PAYMENT = 'INITIATE_PAYMENT';
    const FEATURE_CREATE_PAYMENT = 'CREATE_PAYMENT';
    const FEATURE_INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT = 'INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT';
    const FEATURE_CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT = 'CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT';
    const FEATURE_INITIATE_DOMESTIC_SCHEDULED_PAYMENT = 'INITIATE_DOMESTIC_SCHEDULED_PAYMENT';
    const FEATURE_CREATE_DOMESTIC_SCHEDULED_PAYMENT = 'CREATE_DOMESTIC_SCHEDULED_PAYMENT';
    const FEATURE_INITIATE_DOMESTIC_PERIODIC_PAYMENT_ORDER = 'INITIATE_DOMESTIC_PERIODIC_PAYMENT_ORDER';
    const FEATURE_CREATE_DOMESTIC_PERIODIC_PAYMENT_ORDER = 'CREATE_DOMESTIC_PERIODIC_PAYMENT_ORDER';
    const FEATURE_INITIATE_DOMESTIC_PERIODIC_PAYMENT_ORDER_EXTENDED = 'INITIATE_DOMESTIC_PERIODIC_PAYMENT_ORDER_EXTENDED';
    const FEATURE_CREATE_DOMESTIC_PERIODIC_PAYMENT_ORDER_EXTENDED = 'CREATE_DOMESTIC_PERIODIC_PAYMENT_ORDER_EXTENDED';
    const FEATURE_INITIATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT = 'INITIATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT';
    const FEATURE_CREATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT = 'CREATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT';
    const FEATURE_INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT = 'INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT';
    const FEATURE_CREATE_INTERNATIONAL_SCHEDULED_PAYMENT = 'CREATE_INTERNATIONAL_SCHEDULED_PAYMENT';
    const FEATURE_INITIATE_INTERNATIONAL_PERIODIC_PAYMENT_ORDER = 'INITIATE_INTERNATIONAL_PERIODIC_PAYMENT_ORDER';
    const FEATURE_CREATE_INTERNATIONAL_PERIODIC_PAYMENT_ORDER = 'CREATE_INTERNATIONAL_PERIODIC_PAYMENT_ORDER';
    const FEATURE_INITIATE_INTERNATIONAL_PAYMENT = 'INITIATE_INTERNATIONAL_PAYMENT';
    const FEATURE_CREATE_INTERNATIONAL_PAYMENT = 'CREATE_INTERNATIONAL_PAYMENT';
    const FEATURE_TRANSFER = 'TRANSFER';
    const FEATURE_OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS = 'OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS';
    const FEATURE_OPEN_DATA_ATMS = 'OPEN_DATA_ATMS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureAllowableValues()
    {
        return [
            self::FEATURE_INITIATE_ACCOUNT_REQUEST,
            self::FEATURE_ACCOUNT_REQUEST_DETAILS,
            self::FEATURE_ACCOUNTS,
            self::FEATURE_ACCOUNT,
            self::FEATURE_ACCOUNT_TRANSACTIONS,
            self::FEATURE_ACCOUNT_STATEMENTS,
            self::FEATURE_ACCOUNT_STATEMENT,
            self::FEATURE_ACCOUNT_STATEMENT_FILE,
            self::FEATURE_ACCOUNT_SCHEDULED_PAYMENTS,
            self::FEATURE_ACCOUNT_DIRECT_DEBITS,
            self::FEATURE_ACCOUNT_PERIODIC_PAYMENTS,
            self::FEATURE_ACCOUNT_TRANSACTIONS_WITH_MERCHANT,
            self::FEATURE_IDENTITY,
            self::FEATURE_INITIATE_SINGLE_PAYMENT_SORTCODE,
            self::FEATURE_EXISTING_PAYMENT_INITIATION_DETAILS,
            self::FEATURE_CREATE_SINGLE_PAYMENT_SORTCODE,
            self::FEATURE_EXISTING_PAYMENTS_DETAILS,
            self::FEATURE_INITIATE_PAYMENT,
            self::FEATURE_CREATE_PAYMENT,
            self::FEATURE_INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT,
            self::FEATURE_CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT,
            self::FEATURE_INITIATE_DOMESTIC_SCHEDULED_PAYMENT,
            self::FEATURE_CREATE_DOMESTIC_SCHEDULED_PAYMENT,
            self::FEATURE_INITIATE_DOMESTIC_PERIODIC_PAYMENT_ORDER,
            self::FEATURE_CREATE_DOMESTIC_PERIODIC_PAYMENT_ORDER,
            self::FEATURE_INITIATE_DOMESTIC_PERIODIC_PAYMENT_ORDER_EXTENDED,
            self::FEATURE_CREATE_DOMESTIC_PERIODIC_PAYMENT_ORDER_EXTENDED,
            self::FEATURE_INITIATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT,
            self::FEATURE_CREATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT,
            self::FEATURE_INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT,
            self::FEATURE_CREATE_INTERNATIONAL_SCHEDULED_PAYMENT,
            self::FEATURE_INITIATE_INTERNATIONAL_PERIODIC_PAYMENT_ORDER,
            self::FEATURE_CREATE_INTERNATIONAL_PERIODIC_PAYMENT_ORDER,
            self::FEATURE_INITIATE_INTERNATIONAL_PAYMENT,
            self::FEATURE_CREATE_INTERNATIONAL_PAYMENT,
            self::FEATURE_TRANSFER,
            self::FEATURE_OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS,
            self::FEATURE_OPEN_DATA_ATMS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['feature'] = isset($data['feature']) ? $data['feature'] : null;
        $this->container['endpoint'] = isset($data['endpoint']) ? $data['endpoint'] : null;
        $this->container['documentation_url'] = isset($data['documentation_url']) ? $data['documentation_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFeatureAllowableValues();
        if (!is_null($this->container['feature']) && !in_array($this->container['feature'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'feature', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feature
     *
     * @return string
     */
    public function getFeature()
    {
        return $this->container['feature'];
    }

    /**
     * Sets feature
     *
     * @param string $feature feature
     *
     * @return $this
     */
    public function setFeature($feature)
    {
        $allowedValues = $this->getFeatureAllowableValues();
        if (!is_null($feature) && !in_array($feature, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'feature', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feature'] = $feature;

        return $this;
    }

    /**
     * Gets endpoint
     *
     * @return string
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     *
     * @param string $endpoint endpoint
     *
     * @return $this
     */
    public function setEndpoint($endpoint)
    {
        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets documentation_url
     *
     * @return string
     */
    public function getDocumentationUrl()
    {
        return $this->container['documentation_url'];
    }

    /**
     * Sets documentation_url
     *
     * @param string $documentation_url documentation_url
     *
     * @return $this
     */
    public function setDocumentationUrl($documentation_url)
    {
        $this->container['documentation_url'] = $documentation_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


