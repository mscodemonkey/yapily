<?php
/**
 * OverdraftOverdraftFeeChargeCap
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.149
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * OverdraftOverdraftFeeChargeCap Class Doc Comment
 *
 * @category Class
 * @description Details about any caps (maximum charges) that apply to a particular fee/charge
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OverdraftOverdraftFeeChargeCap implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OverdraftOverdraftFeeChargeCap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'capping_period' => 'string',
        'fee_cap_amount' => 'string',
        'fee_cap_occurrence' => 'float',
        'fee_type' => 'string[]',
        'min_max_type' => 'string',
        'notes' => 'string[]',
        'other_fee_type' => '\Yapily\Model\OverdraftOtherFeeType[]',
        'overdraft_control_indicator' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'capping_period' => null,
        'fee_cap_amount' => null,
        'fee_cap_occurrence' => 'float',
        'fee_type' => null,
        'min_max_type' => null,
        'notes' => null,
        'other_fee_type' => null,
        'overdraft_control_indicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capping_period' => 'CappingPeriod',
        'fee_cap_amount' => 'FeeCapAmount',
        'fee_cap_occurrence' => 'FeeCapOccurrence',
        'fee_type' => 'FeeType',
        'min_max_type' => 'MinMaxType',
        'notes' => 'Notes',
        'other_fee_type' => 'OtherFeeType',
        'overdraft_control_indicator' => 'OverdraftControlIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capping_period' => 'setCappingPeriod',
        'fee_cap_amount' => 'setFeeCapAmount',
        'fee_cap_occurrence' => 'setFeeCapOccurrence',
        'fee_type' => 'setFeeType',
        'min_max_type' => 'setMinMaxType',
        'notes' => 'setNotes',
        'other_fee_type' => 'setOtherFeeType',
        'overdraft_control_indicator' => 'setOverdraftControlIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capping_period' => 'getCappingPeriod',
        'fee_cap_amount' => 'getFeeCapAmount',
        'fee_cap_occurrence' => 'getFeeCapOccurrence',
        'fee_type' => 'getFeeType',
        'min_max_type' => 'getMinMaxType',
        'notes' => 'getNotes',
        'other_fee_type' => 'getOtherFeeType',
        'overdraft_control_indicator' => 'getOverdraftControlIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CAPPING_PERIOD_DAY = 'Day';
    const CAPPING_PERIOD_HALF_YEAR = 'Half Year';
    const CAPPING_PERIOD_MONTH = 'Month';
    const CAPPING_PERIOD_QUARTER = 'Quarter';
    const CAPPING_PERIOD_WEEK = 'Week';
    const CAPPING_PERIOD_ACADEMIC_TERM = 'AcademicTerm';
    const CAPPING_PERIOD_YEAR = 'Year';
    const FEE_TYPE_ARRANGED_OVERDRAFT = 'ArrangedOverdraft';
    const FEE_TYPE_EMERGENCY_BORROWING = 'EmergencyBorrowing';
    const FEE_TYPE_BORROWING_ITEM = 'BorrowingItem';
    const FEE_TYPE_OVERDRAFT_RENEWAL = 'OverdraftRenewal';
    const FEE_TYPE_ANNUAL_REVIEW = 'AnnualReview';
    const FEE_TYPE_OVERDRAFT_SETUP = 'OverdraftSetup';
    const FEE_TYPE_SURCHARGE = 'Surcharge';
    const FEE_TYPE_TEMP_OVERDRAFT = 'TempOverdraft';
    const FEE_TYPE_UNAUTHORISED_BORROWING = 'UnauthorisedBorrowing';
    const FEE_TYPE_UNAUTHORISED_PAID_TRANS = 'UnauthorisedPaidTrans';
    const FEE_TYPE_OTHER = 'Other';
    const FEE_TYPE_UNAUTHORISED_UNPAID_TRANS = 'UnauthorisedUnpaidTrans';
    const MIN_MAX_TYPE_MINIMUM = 'Minimum';
    const MIN_MAX_TYPE_MAXIMUM = 'Maximum';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCappingPeriodAllowableValues()
    {
        return [
            self::CAPPING_PERIOD_DAY,
            self::CAPPING_PERIOD_HALF_YEAR,
            self::CAPPING_PERIOD_MONTH,
            self::CAPPING_PERIOD_QUARTER,
            self::CAPPING_PERIOD_WEEK,
            self::CAPPING_PERIOD_ACADEMIC_TERM,
            self::CAPPING_PERIOD_YEAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeeTypeAllowableValues()
    {
        return [
            self::FEE_TYPE_ARRANGED_OVERDRAFT,
            self::FEE_TYPE_EMERGENCY_BORROWING,
            self::FEE_TYPE_BORROWING_ITEM,
            self::FEE_TYPE_OVERDRAFT_RENEWAL,
            self::FEE_TYPE_ANNUAL_REVIEW,
            self::FEE_TYPE_OVERDRAFT_SETUP,
            self::FEE_TYPE_SURCHARGE,
            self::FEE_TYPE_TEMP_OVERDRAFT,
            self::FEE_TYPE_UNAUTHORISED_BORROWING,
            self::FEE_TYPE_UNAUTHORISED_PAID_TRANS,
            self::FEE_TYPE_OTHER,
            self::FEE_TYPE_UNAUTHORISED_UNPAID_TRANS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMinMaxTypeAllowableValues()
    {
        return [
            self::MIN_MAX_TYPE_MINIMUM,
            self::MIN_MAX_TYPE_MAXIMUM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['capping_period'] = isset($data['capping_period']) ? $data['capping_period'] : null;
        $this->container['fee_cap_amount'] = isset($data['fee_cap_amount']) ? $data['fee_cap_amount'] : null;
        $this->container['fee_cap_occurrence'] = isset($data['fee_cap_occurrence']) ? $data['fee_cap_occurrence'] : null;
        $this->container['fee_type'] = isset($data['fee_type']) ? $data['fee_type'] : null;
        $this->container['min_max_type'] = isset($data['min_max_type']) ? $data['min_max_type'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['other_fee_type'] = isset($data['other_fee_type']) ? $data['other_fee_type'] : null;
        $this->container['overdraft_control_indicator'] = isset($data['overdraft_control_indicator']) ? $data['overdraft_control_indicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCappingPeriodAllowableValues();
        if (!is_null($this->container['capping_period']) && !in_array($this->container['capping_period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'capping_period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMinMaxTypeAllowableValues();
        if (!is_null($this->container['min_max_type']) && !in_array($this->container['min_max_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'min_max_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capping_period
     *
     * @return string
     */
    public function getCappingPeriod()
    {
        return $this->container['capping_period'];
    }

    /**
     * Sets capping_period
     *
     * @param string $capping_period capping_period
     *
     * @return $this
     */
    public function setCappingPeriod($capping_period)
    {
        $allowedValues = $this->getCappingPeriodAllowableValues();
        if (!is_null($capping_period) && !in_array($capping_period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'capping_period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capping_period'] = $capping_period;

        return $this;
    }

    /**
     * Gets fee_cap_amount
     *
     * @return string
     */
    public function getFeeCapAmount()
    {
        return $this->container['fee_cap_amount'];
    }

    /**
     * Sets fee_cap_amount
     *
     * @param string $fee_cap_amount fee_cap_amount
     *
     * @return $this
     */
    public function setFeeCapAmount($fee_cap_amount)
    {
        $this->container['fee_cap_amount'] = $fee_cap_amount;

        return $this;
    }

    /**
     * Gets fee_cap_occurrence
     *
     * @return float
     */
    public function getFeeCapOccurrence()
    {
        return $this->container['fee_cap_occurrence'];
    }

    /**
     * Sets fee_cap_occurrence
     *
     * @param float $fee_cap_occurrence fee_cap_occurrence
     *
     * @return $this
     */
    public function setFeeCapOccurrence($fee_cap_occurrence)
    {
        $this->container['fee_cap_occurrence'] = $fee_cap_occurrence;

        return $this;
    }

    /**
     * Gets fee_type
     *
     * @return string[]
     */
    public function getFeeType()
    {
        return $this->container['fee_type'];
    }

    /**
     * Sets fee_type
     *
     * @param string[] $fee_type fee_type
     *
     * @return $this
     */
    public function setFeeType($fee_type)
    {
        $allowedValues = $this->getFeeTypeAllowableValues();
        if (!is_null($fee_type) && array_diff($fee_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fee_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fee_type'] = $fee_type;

        return $this;
    }

    /**
     * Gets min_max_type
     *
     * @return string
     */
    public function getMinMaxType()
    {
        return $this->container['min_max_type'];
    }

    /**
     * Sets min_max_type
     *
     * @param string $min_max_type min_max_type
     *
     * @return $this
     */
    public function setMinMaxType($min_max_type)
    {
        $allowedValues = $this->getMinMaxTypeAllowableValues();
        if (!is_null($min_max_type) && !in_array($min_max_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'min_max_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['min_max_type'] = $min_max_type;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string[] $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets other_fee_type
     *
     * @return \Yapily\Model\OverdraftOtherFeeType[]
     */
    public function getOtherFeeType()
    {
        return $this->container['other_fee_type'];
    }

    /**
     * Sets other_fee_type
     *
     * @param \Yapily\Model\OverdraftOtherFeeType[] $other_fee_type other_fee_type
     *
     * @return $this
     */
    public function setOtherFeeType($other_fee_type)
    {
        $this->container['other_fee_type'] = $other_fee_type;

        return $this;
    }

    /**
     * Gets overdraft_control_indicator
     *
     * @return bool
     */
    public function getOverdraftControlIndicator()
    {
        return $this->container['overdraft_control_indicator'];
    }

    /**
     * Sets overdraft_control_indicator
     *
     * @param bool $overdraft_control_indicator overdraft_control_indicator
     *
     * @return $this
     */
    public function setOverdraftControlIndicator($overdraft_control_indicator)
    {
        $this->container['overdraft_control_indicator'] = $overdraft_control_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


