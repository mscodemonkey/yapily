<?php
/**
 * OverdraftOverdraftFeeChargeDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your Application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * OverdraftOverdraftFeeChargeDetail Class Doc Comment
 *
 * @category Class
 * @description Details about the fees/charges
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OverdraftOverdraftFeeChargeDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OverdraftOverdraftFeeChargeDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'application_frequency' => 'string',
        'calculation_frequency' => 'string',
        'fee_amount' => 'string',
        'fee_rate' => 'string',
        'fee_rate_type' => 'string',
        'fee_type' => 'string',
        'incremental_borrowing_amount' => 'string',
        'notes' => 'string[]',
        'other_application_frequency' => '\Yapily\Model\OtherApplicationFrequency',
        'other_calculation_frequency' => '\Yapily\Model\OtherCalculationFrequency',
        'other_fee_rate_type' => '\Yapily\Model\OtherFeeRateType',
        'other_fee_type' => '\Yapily\Model\OtherFeeType',
        'overdraft_control_indicator' => 'bool',
        'overdraft_fee_applicable_range' => '\Yapily\Model\OverdraftFeeApplicableRange'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'application_frequency' => null,
        'calculation_frequency' => null,
        'fee_amount' => null,
        'fee_rate' => null,
        'fee_rate_type' => null,
        'fee_type' => null,
        'incremental_borrowing_amount' => null,
        'notes' => null,
        'other_application_frequency' => null,
        'other_calculation_frequency' => null,
        'other_fee_rate_type' => null,
        'other_fee_type' => null,
        'overdraft_control_indicator' => null,
        'overdraft_fee_applicable_range' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'application_frequency' => 'ApplicationFrequency',
        'calculation_frequency' => 'CalculationFrequency',
        'fee_amount' => 'FeeAmount',
        'fee_rate' => 'FeeRate',
        'fee_rate_type' => 'FeeRateType',
        'fee_type' => 'FeeType',
        'incremental_borrowing_amount' => 'IncrementalBorrowingAmount',
        'notes' => 'Notes',
        'other_application_frequency' => 'OtherApplicationFrequency',
        'other_calculation_frequency' => 'OtherCalculationFrequency',
        'other_fee_rate_type' => 'OtherFeeRateType',
        'other_fee_type' => 'OtherFeeType',
        'overdraft_control_indicator' => 'OverdraftControlIndicator',
        'overdraft_fee_applicable_range' => 'OverdraftFeeApplicableRange'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'application_frequency' => 'setApplicationFrequency',
        'calculation_frequency' => 'setCalculationFrequency',
        'fee_amount' => 'setFeeAmount',
        'fee_rate' => 'setFeeRate',
        'fee_rate_type' => 'setFeeRateType',
        'fee_type' => 'setFeeType',
        'incremental_borrowing_amount' => 'setIncrementalBorrowingAmount',
        'notes' => 'setNotes',
        'other_application_frequency' => 'setOtherApplicationFrequency',
        'other_calculation_frequency' => 'setOtherCalculationFrequency',
        'other_fee_rate_type' => 'setOtherFeeRateType',
        'other_fee_type' => 'setOtherFeeType',
        'overdraft_control_indicator' => 'setOverdraftControlIndicator',
        'overdraft_fee_applicable_range' => 'setOverdraftFeeApplicableRange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'application_frequency' => 'getApplicationFrequency',
        'calculation_frequency' => 'getCalculationFrequency',
        'fee_amount' => 'getFeeAmount',
        'fee_rate' => 'getFeeRate',
        'fee_rate_type' => 'getFeeRateType',
        'fee_type' => 'getFeeType',
        'incremental_borrowing_amount' => 'getIncrementalBorrowingAmount',
        'notes' => 'getNotes',
        'other_application_frequency' => 'getOtherApplicationFrequency',
        'other_calculation_frequency' => 'getOtherCalculationFrequency',
        'other_fee_rate_type' => 'getOtherFeeRateType',
        'other_fee_type' => 'getOtherFeeType',
        'overdraft_control_indicator' => 'getOverdraftControlIndicator',
        'overdraft_fee_applicable_range' => 'getOverdraftFeeApplicableRange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const APPLICATION_FREQUENCY_ACCOUNT_CLOSING = 'AccountClosing';
    const APPLICATION_FREQUENCY_ACCOUNT_OPENING = 'AccountOpening';
    const APPLICATION_FREQUENCY_ACADEMIC_TERM = 'AcademicTerm';
    const APPLICATION_FREQUENCY_CHARGING_PERIOD = 'ChargingPeriod';
    const APPLICATION_FREQUENCY_DAILY = 'Daily';
    const APPLICATION_FREQUENCY_PER_ITEM = 'PerItem';
    const APPLICATION_FREQUENCY_MONTHLY = 'Monthly';
    const APPLICATION_FREQUENCY_ON_ACCOUNT_ANNIVERSARY = 'OnAccountAnniversary';
    const APPLICATION_FREQUENCY_OTHER = 'Other';
    const APPLICATION_FREQUENCY_PER_HOUR = 'PerHour';
    const APPLICATION_FREQUENCY_PER_OCCURRENCE = 'PerOccurrence';
    const APPLICATION_FREQUENCY_PER_SHEET = 'PerSheet';
    const APPLICATION_FREQUENCY_PER_TRANSACTION = 'PerTransaction';
    const APPLICATION_FREQUENCY_PER_TRANSACTION_AMOUNT = 'PerTransactionAmount';
    const APPLICATION_FREQUENCY_PER_TRANSACTION_PERCENTAGE = 'PerTransactionPercentage';
    const APPLICATION_FREQUENCY_QUARTERLY = 'Quarterly';
    const APPLICATION_FREQUENCY_SIX_MONTHLY = 'SixMonthly';
    const APPLICATION_FREQUENCY_STATEMENT_MONTHLY = 'StatementMonthly';
    const APPLICATION_FREQUENCY_WEEKLY = 'Weekly';
    const APPLICATION_FREQUENCY_YEARLY = 'Yearly';
    const CALCULATION_FREQUENCY_ACCOUNT_CLOSING = 'AccountClosing';
    const CALCULATION_FREQUENCY_ACCOUNT_OPENING = 'AccountOpening';
    const CALCULATION_FREQUENCY_ACADEMIC_TERM = 'AcademicTerm';
    const CALCULATION_FREQUENCY_CHARGING_PERIOD = 'ChargingPeriod';
    const CALCULATION_FREQUENCY_DAILY = 'Daily';
    const CALCULATION_FREQUENCY_PER_ITEM = 'PerItem';
    const CALCULATION_FREQUENCY_MONTHLY = 'Monthly';
    const CALCULATION_FREQUENCY_ON_ACCOUNT_ANNIVERSARY = 'OnAccountAnniversary';
    const CALCULATION_FREQUENCY_OTHER = 'Other';
    const CALCULATION_FREQUENCY_PER_HOUR = 'PerHour';
    const CALCULATION_FREQUENCY_PER_OCCURRENCE = 'PerOccurrence';
    const CALCULATION_FREQUENCY_PER_SHEET = 'PerSheet';
    const CALCULATION_FREQUENCY_PER_TRANSACTION = 'PerTransaction';
    const CALCULATION_FREQUENCY_PER_TRANSACTION_AMOUNT = 'PerTransactionAmount';
    const CALCULATION_FREQUENCY_PER_TRANSACTION_PERCENTAGE = 'PerTransactionPercentage';
    const CALCULATION_FREQUENCY_QUARTERLY = 'Quarterly';
    const CALCULATION_FREQUENCY_SIX_MONTHLY = 'SixMonthly';
    const CALCULATION_FREQUENCY_STATEMENT_MONTHLY = 'StatementMonthly';
    const CALCULATION_FREQUENCY_WEEKLY = 'Weekly';
    const CALCULATION_FREQUENCY_YEARLY = 'Yearly';
    const FEE_RATE_TYPE_LINKED_BASE_RATE = 'LinkedBaseRate';
    const FEE_RATE_TYPE_GROSS = 'Gross';
    const FEE_RATE_TYPE_NET = 'Net';
    const FEE_RATE_TYPE_OTHER = 'Other';
    const FEE_TYPE_ARRANGED_OVERDRAFT = 'ArrangedOverdraft';
    const FEE_TYPE_EMERGENCY_BORROWING = 'EmergencyBorrowing';
    const FEE_TYPE_BORROWING_ITEM = 'BorrowingItem';
    const FEE_TYPE_OVERDRAFT_RENEWAL = 'OverdraftRenewal';
    const FEE_TYPE_ANNUAL_REVIEW = 'AnnualReview';
    const FEE_TYPE_OVERDRAFT_SETUP = 'OverdraftSetup';
    const FEE_TYPE_SURCHARGE = 'Surcharge';
    const FEE_TYPE_TEMP_OVERDRAFT = 'TempOverdraft';
    const FEE_TYPE_UNAUTHORISED_BORROWING = 'UnauthorisedBorrowing';
    const FEE_TYPE_UNAUTHORISED_PAID_TRANS = 'UnauthorisedPaidTrans';
    const FEE_TYPE_UNAUTHORISED_UNPAID_TRANS = 'UnauthorisedUnpaidTrans';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApplicationFrequencyAllowableValues()
    {
        return [
            self::APPLICATION_FREQUENCY_ACCOUNT_CLOSING,
            self::APPLICATION_FREQUENCY_ACCOUNT_OPENING,
            self::APPLICATION_FREQUENCY_ACADEMIC_TERM,
            self::APPLICATION_FREQUENCY_CHARGING_PERIOD,
            self::APPLICATION_FREQUENCY_DAILY,
            self::APPLICATION_FREQUENCY_PER_ITEM,
            self::APPLICATION_FREQUENCY_MONTHLY,
            self::APPLICATION_FREQUENCY_ON_ACCOUNT_ANNIVERSARY,
            self::APPLICATION_FREQUENCY_OTHER,
            self::APPLICATION_FREQUENCY_PER_HOUR,
            self::APPLICATION_FREQUENCY_PER_OCCURRENCE,
            self::APPLICATION_FREQUENCY_PER_SHEET,
            self::APPLICATION_FREQUENCY_PER_TRANSACTION,
            self::APPLICATION_FREQUENCY_PER_TRANSACTION_AMOUNT,
            self::APPLICATION_FREQUENCY_PER_TRANSACTION_PERCENTAGE,
            self::APPLICATION_FREQUENCY_QUARTERLY,
            self::APPLICATION_FREQUENCY_SIX_MONTHLY,
            self::APPLICATION_FREQUENCY_STATEMENT_MONTHLY,
            self::APPLICATION_FREQUENCY_WEEKLY,
            self::APPLICATION_FREQUENCY_YEARLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCalculationFrequencyAllowableValues()
    {
        return [
            self::CALCULATION_FREQUENCY_ACCOUNT_CLOSING,
            self::CALCULATION_FREQUENCY_ACCOUNT_OPENING,
            self::CALCULATION_FREQUENCY_ACADEMIC_TERM,
            self::CALCULATION_FREQUENCY_CHARGING_PERIOD,
            self::CALCULATION_FREQUENCY_DAILY,
            self::CALCULATION_FREQUENCY_PER_ITEM,
            self::CALCULATION_FREQUENCY_MONTHLY,
            self::CALCULATION_FREQUENCY_ON_ACCOUNT_ANNIVERSARY,
            self::CALCULATION_FREQUENCY_OTHER,
            self::CALCULATION_FREQUENCY_PER_HOUR,
            self::CALCULATION_FREQUENCY_PER_OCCURRENCE,
            self::CALCULATION_FREQUENCY_PER_SHEET,
            self::CALCULATION_FREQUENCY_PER_TRANSACTION,
            self::CALCULATION_FREQUENCY_PER_TRANSACTION_AMOUNT,
            self::CALCULATION_FREQUENCY_PER_TRANSACTION_PERCENTAGE,
            self::CALCULATION_FREQUENCY_QUARTERLY,
            self::CALCULATION_FREQUENCY_SIX_MONTHLY,
            self::CALCULATION_FREQUENCY_STATEMENT_MONTHLY,
            self::CALCULATION_FREQUENCY_WEEKLY,
            self::CALCULATION_FREQUENCY_YEARLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeeRateTypeAllowableValues()
    {
        return [
            self::FEE_RATE_TYPE_LINKED_BASE_RATE,
            self::FEE_RATE_TYPE_GROSS,
            self::FEE_RATE_TYPE_NET,
            self::FEE_RATE_TYPE_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeeTypeAllowableValues()
    {
        return [
            self::FEE_TYPE_ARRANGED_OVERDRAFT,
            self::FEE_TYPE_EMERGENCY_BORROWING,
            self::FEE_TYPE_BORROWING_ITEM,
            self::FEE_TYPE_OVERDRAFT_RENEWAL,
            self::FEE_TYPE_ANNUAL_REVIEW,
            self::FEE_TYPE_OVERDRAFT_SETUP,
            self::FEE_TYPE_SURCHARGE,
            self::FEE_TYPE_TEMP_OVERDRAFT,
            self::FEE_TYPE_UNAUTHORISED_BORROWING,
            self::FEE_TYPE_UNAUTHORISED_PAID_TRANS,
            self::FEE_TYPE_UNAUTHORISED_UNPAID_TRANS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['application_frequency'] = isset($data['application_frequency']) ? $data['application_frequency'] : null;
        $this->container['calculation_frequency'] = isset($data['calculation_frequency']) ? $data['calculation_frequency'] : null;
        $this->container['fee_amount'] = isset($data['fee_amount']) ? $data['fee_amount'] : null;
        $this->container['fee_rate'] = isset($data['fee_rate']) ? $data['fee_rate'] : null;
        $this->container['fee_rate_type'] = isset($data['fee_rate_type']) ? $data['fee_rate_type'] : null;
        $this->container['fee_type'] = isset($data['fee_type']) ? $data['fee_type'] : null;
        $this->container['incremental_borrowing_amount'] = isset($data['incremental_borrowing_amount']) ? $data['incremental_borrowing_amount'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['other_application_frequency'] = isset($data['other_application_frequency']) ? $data['other_application_frequency'] : null;
        $this->container['other_calculation_frequency'] = isset($data['other_calculation_frequency']) ? $data['other_calculation_frequency'] : null;
        $this->container['other_fee_rate_type'] = isset($data['other_fee_rate_type']) ? $data['other_fee_rate_type'] : null;
        $this->container['other_fee_type'] = isset($data['other_fee_type']) ? $data['other_fee_type'] : null;
        $this->container['overdraft_control_indicator'] = isset($data['overdraft_control_indicator']) ? $data['overdraft_control_indicator'] : null;
        $this->container['overdraft_fee_applicable_range'] = isset($data['overdraft_fee_applicable_range']) ? $data['overdraft_fee_applicable_range'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getApplicationFrequencyAllowableValues();
        if (!is_null($this->container['application_frequency']) && !in_array($this->container['application_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'application_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCalculationFrequencyAllowableValues();
        if (!is_null($this->container['calculation_frequency']) && !in_array($this->container['calculation_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'calculation_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFeeRateTypeAllowableValues();
        if (!is_null($this->container['fee_rate_type']) && !in_array($this->container['fee_rate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fee_rate_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFeeTypeAllowableValues();
        if (!is_null($this->container['fee_type']) && !in_array($this->container['fee_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fee_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets application_frequency
     *
     * @return string
     */
    public function getApplicationFrequency()
    {
        return $this->container['application_frequency'];
    }

    /**
     * Sets application_frequency
     *
     * @param string $application_frequency application_frequency
     *
     * @return $this
     */
    public function setApplicationFrequency($application_frequency)
    {
        $allowedValues = $this->getApplicationFrequencyAllowableValues();
        if (!is_null($application_frequency) && !in_array($application_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'application_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['application_frequency'] = $application_frequency;

        return $this;
    }

    /**
     * Gets calculation_frequency
     *
     * @return string
     */
    public function getCalculationFrequency()
    {
        return $this->container['calculation_frequency'];
    }

    /**
     * Sets calculation_frequency
     *
     * @param string $calculation_frequency calculation_frequency
     *
     * @return $this
     */
    public function setCalculationFrequency($calculation_frequency)
    {
        $allowedValues = $this->getCalculationFrequencyAllowableValues();
        if (!is_null($calculation_frequency) && !in_array($calculation_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'calculation_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['calculation_frequency'] = $calculation_frequency;

        return $this;
    }

    /**
     * Gets fee_amount
     *
     * @return string
     */
    public function getFeeAmount()
    {
        return $this->container['fee_amount'];
    }

    /**
     * Sets fee_amount
     *
     * @param string $fee_amount fee_amount
     *
     * @return $this
     */
    public function setFeeAmount($fee_amount)
    {
        $this->container['fee_amount'] = $fee_amount;

        return $this;
    }

    /**
     * Gets fee_rate
     *
     * @return string
     */
    public function getFeeRate()
    {
        return $this->container['fee_rate'];
    }

    /**
     * Sets fee_rate
     *
     * @param string $fee_rate fee_rate
     *
     * @return $this
     */
    public function setFeeRate($fee_rate)
    {
        $this->container['fee_rate'] = $fee_rate;

        return $this;
    }

    /**
     * Gets fee_rate_type
     *
     * @return string
     */
    public function getFeeRateType()
    {
        return $this->container['fee_rate_type'];
    }

    /**
     * Sets fee_rate_type
     *
     * @param string $fee_rate_type fee_rate_type
     *
     * @return $this
     */
    public function setFeeRateType($fee_rate_type)
    {
        $allowedValues = $this->getFeeRateTypeAllowableValues();
        if (!is_null($fee_rate_type) && !in_array($fee_rate_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fee_rate_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fee_rate_type'] = $fee_rate_type;

        return $this;
    }

    /**
     * Gets fee_type
     *
     * @return string
     */
    public function getFeeType()
    {
        return $this->container['fee_type'];
    }

    /**
     * Sets fee_type
     *
     * @param string $fee_type fee_type
     *
     * @return $this
     */
    public function setFeeType($fee_type)
    {
        $allowedValues = $this->getFeeTypeAllowableValues();
        if (!is_null($fee_type) && !in_array($fee_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fee_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fee_type'] = $fee_type;

        return $this;
    }

    /**
     * Gets incremental_borrowing_amount
     *
     * @return string
     */
    public function getIncrementalBorrowingAmount()
    {
        return $this->container['incremental_borrowing_amount'];
    }

    /**
     * Sets incremental_borrowing_amount
     *
     * @param string $incremental_borrowing_amount incremental_borrowing_amount
     *
     * @return $this
     */
    public function setIncrementalBorrowingAmount($incremental_borrowing_amount)
    {
        $this->container['incremental_borrowing_amount'] = $incremental_borrowing_amount;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string[] $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets other_application_frequency
     *
     * @return \Yapily\Model\OtherApplicationFrequency
     */
    public function getOtherApplicationFrequency()
    {
        return $this->container['other_application_frequency'];
    }

    /**
     * Sets other_application_frequency
     *
     * @param \Yapily\Model\OtherApplicationFrequency $other_application_frequency other_application_frequency
     *
     * @return $this
     */
    public function setOtherApplicationFrequency($other_application_frequency)
    {
        $this->container['other_application_frequency'] = $other_application_frequency;

        return $this;
    }

    /**
     * Gets other_calculation_frequency
     *
     * @return \Yapily\Model\OtherCalculationFrequency
     */
    public function getOtherCalculationFrequency()
    {
        return $this->container['other_calculation_frequency'];
    }

    /**
     * Sets other_calculation_frequency
     *
     * @param \Yapily\Model\OtherCalculationFrequency $other_calculation_frequency other_calculation_frequency
     *
     * @return $this
     */
    public function setOtherCalculationFrequency($other_calculation_frequency)
    {
        $this->container['other_calculation_frequency'] = $other_calculation_frequency;

        return $this;
    }

    /**
     * Gets other_fee_rate_type
     *
     * @return \Yapily\Model\OtherFeeRateType
     */
    public function getOtherFeeRateType()
    {
        return $this->container['other_fee_rate_type'];
    }

    /**
     * Sets other_fee_rate_type
     *
     * @param \Yapily\Model\OtherFeeRateType $other_fee_rate_type other_fee_rate_type
     *
     * @return $this
     */
    public function setOtherFeeRateType($other_fee_rate_type)
    {
        $this->container['other_fee_rate_type'] = $other_fee_rate_type;

        return $this;
    }

    /**
     * Gets other_fee_type
     *
     * @return \Yapily\Model\OtherFeeType
     */
    public function getOtherFeeType()
    {
        return $this->container['other_fee_type'];
    }

    /**
     * Sets other_fee_type
     *
     * @param \Yapily\Model\OtherFeeType $other_fee_type other_fee_type
     *
     * @return $this
     */
    public function setOtherFeeType($other_fee_type)
    {
        $this->container['other_fee_type'] = $other_fee_type;

        return $this;
    }

    /**
     * Gets overdraft_control_indicator
     *
     * @return bool
     */
    public function getOverdraftControlIndicator()
    {
        return $this->container['overdraft_control_indicator'];
    }

    /**
     * Sets overdraft_control_indicator
     *
     * @param bool $overdraft_control_indicator overdraft_control_indicator
     *
     * @return $this
     */
    public function setOverdraftControlIndicator($overdraft_control_indicator)
    {
        $this->container['overdraft_control_indicator'] = $overdraft_control_indicator;

        return $this;
    }

    /**
     * Gets overdraft_fee_applicable_range
     *
     * @return \Yapily\Model\OverdraftFeeApplicableRange
     */
    public function getOverdraftFeeApplicableRange()
    {
        return $this->container['overdraft_fee_applicable_range'];
    }

    /**
     * Sets overdraft_fee_applicable_range
     *
     * @param \Yapily\Model\OverdraftFeeApplicableRange $overdraft_fee_applicable_range overdraft_fee_applicable_range
     *
     * @return $this
     */
    public function setOverdraftFeeApplicableRange($overdraft_fee_applicable_range)
    {
        $this->container['overdraft_fee_applicable_range'] = $overdraft_fee_applicable_range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


