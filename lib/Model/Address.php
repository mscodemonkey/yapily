<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yapily API
 *
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * OpenAPI spec version: 0.0.161
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yapily\Model;

use \ArrayAccess;
use \Yapily\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  Yapily
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_lines' => 'string[]',
        'street_name' => 'string',
        'building_number' => 'string',
        'post_code' => 'string',
        'town_name' => 'string',
        'county' => 'string[]',
        'address_type' => 'string',
        'country' => 'string',
        'department' => 'string',
        'sub_department' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_lines' => null,
        'street_name' => null,
        'building_number' => null,
        'post_code' => null,
        'town_name' => null,
        'county' => null,
        'address_type' => null,
        'country' => null,
        'department' => null,
        'sub_department' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_lines' => 'addressLines',
        'street_name' => 'streetName',
        'building_number' => 'buildingNumber',
        'post_code' => 'postCode',
        'town_name' => 'townName',
        'county' => 'county',
        'address_type' => 'addressType',
        'country' => 'country',
        'department' => 'department',
        'sub_department' => 'subDepartment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_lines' => 'setAddressLines',
        'street_name' => 'setStreetName',
        'building_number' => 'setBuildingNumber',
        'post_code' => 'setPostCode',
        'town_name' => 'setTownName',
        'county' => 'setCounty',
        'address_type' => 'setAddressType',
        'country' => 'setCountry',
        'department' => 'setDepartment',
        'sub_department' => 'setSubDepartment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_lines' => 'getAddressLines',
        'street_name' => 'getStreetName',
        'building_number' => 'getBuildingNumber',
        'post_code' => 'getPostCode',
        'town_name' => 'getTownName',
        'county' => 'getCounty',
        'address_type' => 'getAddressType',
        'country' => 'getCountry',
        'department' => 'getDepartment',
        'sub_department' => 'getSubDepartment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ADDRESS_TYPE_BUSINESS = 'BUSINESS';
    const ADDRESS_TYPE_CORRESPONDENCE = 'CORRESPONDENCE';
    const ADDRESS_TYPE_DELIVERY_TO = 'DELIVERY_TO';
    const ADDRESS_TYPE_MAIL_TO = 'MAIL_TO';
    const ADDRESS_TYPE_PO_BOX = 'PO_BOX';
    const ADDRESS_TYPE_POSTAL = 'POSTAL';
    const ADDRESS_TYPE_RESIDENTIAL = 'RESIDENTIAL';
    const ADDRESS_TYPE_STATEMENT = 'STATEMENT';
    const ADDRESS_TYPE_UNKNOWN = 'UNKNOWN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressTypeAllowableValues()
    {
        return [
            self::ADDRESS_TYPE_BUSINESS,
            self::ADDRESS_TYPE_CORRESPONDENCE,
            self::ADDRESS_TYPE_DELIVERY_TO,
            self::ADDRESS_TYPE_MAIL_TO,
            self::ADDRESS_TYPE_PO_BOX,
            self::ADDRESS_TYPE_POSTAL,
            self::ADDRESS_TYPE_RESIDENTIAL,
            self::ADDRESS_TYPE_STATEMENT,
            self::ADDRESS_TYPE_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_lines'] = isset($data['address_lines']) ? $data['address_lines'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['building_number'] = isset($data['building_number']) ? $data['building_number'] : null;
        $this->container['post_code'] = isset($data['post_code']) ? $data['post_code'] : null;
        $this->container['town_name'] = isset($data['town_name']) ? $data['town_name'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['address_type'] = isset($data['address_type']) ? $data['address_type'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['sub_department'] = isset($data['sub_department']) ? $data['sub_department'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!is_null($this->container['address_type']) && !in_array($this->container['address_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'address_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_lines
     *
     * @return string[]
     */
    public function getAddressLines()
    {
        return $this->container['address_lines'];
    }

    /**
     * Sets address_lines
     *
     * @param string[] $address_lines address_lines
     *
     * @return $this
     */
    public function setAddressLines($address_lines)
    {
        $this->container['address_lines'] = $address_lines;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name street_name
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets building_number
     *
     * @return string
     */
    public function getBuildingNumber()
    {
        return $this->container['building_number'];
    }

    /**
     * Sets building_number
     *
     * @param string $building_number building_number
     *
     * @return $this
     */
    public function setBuildingNumber($building_number)
    {
        $this->container['building_number'] = $building_number;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string $post_code post_code
     *
     * @return $this
     */
    public function setPostCode($post_code)
    {
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets town_name
     *
     * @return string
     */
    public function getTownName()
    {
        return $this->container['town_name'];
    }

    /**
     * Sets town_name
     *
     * @param string $town_name town_name
     *
     * @return $this
     */
    public function setTownName($town_name)
    {
        $this->container['town_name'] = $town_name;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string[]
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string[] $county county
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets address_type
     *
     * @return string
     */
    public function getAddressType()
    {
        return $this->container['address_type'];
    }

    /**
     * Sets address_type
     *
     * @param string $address_type address_type
     *
     * @return $this
     */
    public function setAddressType($address_type)
    {
        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!is_null($address_type) && !in_array($address_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'address_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['address_type'] = $address_type;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets sub_department
     *
     * @return string
     */
    public function getSubDepartment()
    {
        return $this->container['sub_department'];
    }

    /**
     * Sets sub_department
     *
     * @param string $sub_department sub_department
     *
     * @return $this
     */
    public function setSubDepartment($sub_department)
    {
        $this->container['sub_department'] = $sub_department;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


